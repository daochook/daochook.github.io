[{"uri":"https://daochook.github.io/usage/configurations/","title":"Configuring daochook","tags":[],"description":"","content":"Once daochook is fully and properly installed, you are ready to begin configurations.\nBoot Configuration File Format The boot configuration file holds all of the information needed to launch the game client with daochook injected. It also includes some additional configurations used with daochook internally, such as if you wish to enable/disable certain included patches. Please read the following information carefully to ensure your boot configuration file is written correctly.\nSection: [import] (optional) import (string) - The name of another boot configuration file to import. Merges the two files settings\u0026rsquo; together to form a single file. The import section is an optional feature that allows advanced users to create base configuration files that can be used by multiple boot configurations. You can create a single base file that defines the daochook.game, daochook.server and daochook.patches sections then include that into each configuration that will use the same base information. Then your actual boot configuration file only needs to implement the daochook.auth for each character instead.\nSection: [daochook.game] path (string) - The full path to your Dark Age of Camelot installation game.dll file that you wish to launch with daochook. Section: [daochook.server] addr (string) - The server IP address (or DNS name) that you wish to connect to. port (number) - The server port that you wish to connect to. id (number) - The server id that you wish to connect to. (Set to 42 if playing on a private server unless otherwise noted.) Section: [daochook.auth] username (string) - The username of the account you wish to login into. password (string) - The password of the account you wish to login into. character (string, optional) - The name of the character you wish to auto-log into. realm (string, optional) - The realm id of the character you wish to auto-log into. (0 = Albion, 1 = Hibernia, 2 = Midgard) Section: [daochook.patches] disable_encryption (boolean) - Patch that will remove the packet encryption if enabled. disable_multi_instance_check (boolean) - Patch that will remove the multi-client instance check if enabled. Section: [daochook.addons] This configuration section is special. It does not require the typical key/value pairing and instead, only expects keys. Keys should be the name of addons that you wish to automatically load when the game client starts.\nFor example, this section would look like this:\n1[daochook.addons] 2example 3fps 4move This would automatically load the example, fps and move addon\u0026rsquo;s when the game first starts.\nExample Boot Configuration File Here is a full example configuration file:\n\u0026lt;Path To daochook\u0026gt;\\boot\\config\\atom0s.ini:\n1[daochook.game] 2path= Z:\\Games\\Electronic Arts\\Dark Age of Camelot\\game.dll 3 4[daochook.server] 5addr= 192.168.1.100 6port= 10300 7id= 42 8 9[daochook.auth] 10username= atom0s 11password= password 12character= Atomos 13realm= 2 14 15[daochook.patches] 16disable_encryption = 1 17disable_multi_instance_check = 1 Import Usage Example As mentioned above, advanced users can make use of the import section of the configuration file to include a base configuration file that holds information that would otherwise be duplicated across multiple files. Here is quick exmaple of using the import section for two characters that would connect to the same server.\n\u0026lt;Path To daochook\u0026gt;\\boot\\config\\my_server.ini:\n1[daochook.game] 2path= Z:\\Games\\Electronic Arts\\Dark Age of Camelot\\game.dll 3 4[daochook.server] 5addr= 192.168.1.100 6port= 10300 7id= 42 8 9[daochook.patches] 10disable_encryption = 1 11disable_multi_instance_check = 1 \u0026lt;Path To daochook\u0026gt;\\boot\\config\\atom0s1.ini:\n1[import] 2import=my_server.ini 3 4[daochook.auth] 5username= atom0s1 6password= password 7character= Atomosone 8realm= 2 \u0026lt;Path To daochook\u0026gt;\\boot\\config\\atom0s2.ini:\n1[import] 2import=my_server.ini 3 4[daochook.auth] 5username= atom0s2 6password= password 7character= Atomostwo 8realm= 2 "},{"uri":"https://daochook.github.io/developers/creating_addons/","title":"Creating Addons","tags":[],"description":"","content":" Failure to follow the directions given here will result in your addon most likely not loading or immediately crashing/erroring. Addons are expected to follow a strict layout / guideline in order to be able to load and function properly! Be sure to read carefully before asking for help.\nCreating A New Addon Addons are located within the \u0026lt;Path To daochook\u0026gt;\\addons\\ directory. Inside of this folder, you will see individual folders for each addon, as well as a libs folder which contains a handful of helper libraries that addons can make use of while running.\nPlease be sure that you understand the following:\nAddons MUST have their own individual folder. Addons MUST have their main .lua script file named the same thing as their folder. For example, if you wanted to make an addon named \u0026lsquo;hello\u0026rsquo;, you would make the following:\n\u0026lt;Path To daochook\u0026gt;\\addons\\hello\\ (The addon folder.) \u0026lt;Path To daochook\u0026gt;\\addons\\hello\\hello.lua (The addons main .lua file.) The name of the folder and main .lua file for each addon is the name that is also used for any of the in-game /addon commands.\nFailure to follow this setup will result in your addon not loading.\nCoding Addons With VSCode Lua is coded in plain-text script files with the .lua extension. There are many code editors that support the Lua language syntax, however we recommend that you use Visual Studio Code. VSCode has multiple extensions that support and extend the Lua syntax. Below is a list of links to the various extensions we recommend you use while developing addons.\nVSCode: https://code.visualstudio.com/ sumneko.lua: https://marketplace.visualstudio.com/items?itemName=sumneko.lua Once installed, you can open the addons folder in VSCode (File -\u0026gt; Open Folder) to have the Lua extension pick up the included predefined information found in the /addons/.vscode/settings.json file. This file holds predefined globals information to help the plugin understand types that are not directly defined in any of the included libs files. (ie. Things exposed by daochook) It is recommended that anytime you are editing an addon, that you open the entire addon folder like this to allow the extension to load these settings. Failure to do so may result in the editor showing errors/warnings on various parts of your code that are otherwise valid.\nCoding Your Addon Once you have your environment setup and established, open your new addon\u0026rsquo;s main .lua script in your preferred editor. (Again, if you are using VSCode, you should open the entire addons folder while editing your addon!)\nAt the top of your file, it is recommended to include a license which states how you wish to share your code. Lua scripts are open source by design, so you will need to understand regardless of what license you pick, anyone that you share the addon with will be able to see its code directly. Feel free to check out the included example addons, libs, etc. for how the license should look. daochook is released under the GNU AGPL v3 license. Other common licenses for open source files are: Apache, BSD, GNU GPL v2, GNU GPL v3, MIT (It is recommended that you read up on each license before picking one and ensuring you understand what it means.)\nNext, your addon MUST implement the expected addon table information. Failure to include this table in your addon will result in your addon not loading.\nThe addon table will look like this:\naddon.name = \u0026#39;hello\u0026#39;; addon.author = \u0026#39;atom0s\u0026#39;; addon.desc = \u0026#39;An example addon.\u0026#39;; addon.link = \u0026#39;https://atom0s.com\u0026#39;; addon.version = \u0026#39;1.0\u0026#39;; For more information regarding the predefined addon table, please continue to the next documentation page: Addon Table Information\n"},{"uri":"https://daochook.github.io/installation/system_requirements/","title":"System Requirements","tags":[],"description":"","content":"daochook Requirements daochook specifically requires the following in order to function:\nMicrosoft Visual C++ Redist. 2022 - https://aka.ms/vs/17/release/vc_redist.x86.exe Latest Client Requirements Before attempting to use daochook, you should make sure that your system meets the minimum requirements for the official Dark Age of Camelot game client.\nMinimum Recommended Pentium 4 2.0 GHz or equivalent Pentium 4 3.0 GHz or equivalent 512 MB RAM 1 GB RAM 3.5 GB free hard drive space 3.5 GB free hard drive space Compatible 3D acceleration card w/ 64 MB VRAM 256 MB ATI X800 or Nvidia GeForce 6800 series or higher Directx 9.0c or later Direct X 9.0c or later Shader 1.1 or higher Shader 2.X or greater support Internet Connection Required Internet Connection Required There are no additional system requirements in regards to hardware needed for daochook to operate. If you meet the client requirements, you are fine.\n"},{"uri":"https://daochook.github.io/developers/addon_table/","title":"Addon Table Information","tags":[],"description":"","content":"The addon table is predefined within daochook for each addon being loaded. This table contains some additional properties that can be used/accessed by an addon while it\u0026rsquo;s running.\nYou should NEVER attempt to recreate the addon table or set it to a new value!\nThis will cause your addon to crash and potentially crash the full client.\naddon Table Information The following table is the properties available within the addon table.\nField Type Description author string The name of the author who wrote the addon. desc string Short description of what the addon does / is for. instance userdata [Read Only] The internal addon object pointer. (See below for more info.) link string The url to the addons homepage, where users can find information, support, or updates. name string The name of the addon. path string [Read Only] The path to the addon. tasks table [Read Only] Internal table that holds running task coroutine information. version string The version of the addon. (In the format of X.X.X, such as 1.0.0) The addon.instance object exposes a few properties that addons can use to check certain information.\nField Type Description current_frame number [Read Only] The current frame count the addon is executing on. state number [Read Only] The addons current state. Note: Attempting to write to any read-only value will cause your addon to error and unload.\n"},{"uri":"https://daochook.github.io/installation/install_git/","title":"Install via Git (Recommended)","tags":[],"description":"","content":" If you are unsure of using Git or do not wish to use it, then you can instead follow the instructions for downloading the latest release package manually as a .zip file. See Install via Zip instead.\nCurrently, the best, and recommended, way to install daochook is by using Git. You can either use Git via the command line or install your personal favorite Git client or shell integration. There is no \u0026lsquo;best\u0026rsquo; client or means of using Git, that is entirely personal choice on which you prefer to use.\nSome recommended free solutions are:\nGit For Windows (Direct Git command line access.) - https://git-scm.com/download/win TortoiseGit (Windows shell integration.) - https://tortoisegit.org/ GitHub Desktop (Git GUI client.) - https://desktop.github.com/ Sourcetree (Git GUI client.) - https://www.sourcetreeapp.com/ By using Git, it is much easier to keep daochook up to date. You can simply pull the latest changes after you\u0026rsquo;ve initially cloned the release repository.\nPicking An Installation Folder When picking a folder to install daochook to, it is important that you are NOT breaking the following guidelines.\ndaochook should NOT be installed into a system protected folder.\nThis means it should not be put into folders (or folders within) such as:\nC:\\Program Files (x86)\\, C:\\Program Files\\, C:\\Windows\\\ndaochook should NOT be installed into the game client folder!\nYou should never install daochook into the game client folder for safety reasons.\nIt should be in its own separate folder entirely!\nA recommended and safe installation location would be something such as:\nC:\\daochook\\ C:\\Users\\Your_Username_Here\\Desktop\\daochook\\ Z:\\Some\\Other\\Folder\\daochook\\ Cloning The Release Repository Please note, because there are so many different Git clients available, it is not possible for us to write a full guide for each one. Instead, this guide will demonstrate how to install using two preselected UI clients and with Git via the command line. The two clients that this guide will use are GitHub Desktop and TortoiseGit.\nInstalling via GitHub Desktop First, download and install the GitHub Desktop client. Once installed, launch it and either sign in with your existing GitHub account, or skip the sign in step. (Note: You do not need to sign in to clone the daochook repository, so you can skip the sign in step if you do not want to or do not wish to create an account with GitHub.) From the top menu, click File then Clone Repository... In the clone window, click the URL tab at the top, then enter the repository URL: https://github.com/daochook/daochook.git For the local path, ensure you follow the guidelines above and place daochook into a valid path. For example, C:\\daochook Click Clone. If everything was successful, you\u0026rsquo;re done and should have daochook now installed to the selected folder!\nInstalling via TortoiseGit First, download and install Git for Windows and TortoiseGit. Follow the various prompts to fully install both tools. Restart your computer. (This is recommended as TortoiseGit is a shell extension.) Navigate to the parent folder where you plan to install daochook to. For example: C:\\ Right-click within the parent folder and choose Git Clone.. (Be sure you are not right-clicking on a folder!) In the clone window, enter the repository URL: https://github.com/daochook/daochook.git For the Directory ensure the path is correct and that it has automatically added \\daochook to your parent folder. Click OK to clone. If everything was successful, a second window should show with some information about the clone and that it was successful. If so, then you\u0026rsquo;re done and should have daochook now installed to the selected folder!\nInstalling via Git Command Line First, download and install Git for Windows. Follow the various prompts to fully install. Open a new command prompt window. (cmd, powershell, Windows terminal, bash, etc. are all suitable for this.) Navigate the command prompt to the parent folder you wish to install daochook to. For example: cd C:\\ Enter the following command: git clone https://github.com/daochook/daochook.git If everything was successful, you\u0026rsquo;re done and should have daochook now installed to the selected folder!\n"},{"uri":"https://daochook.github.io/usage/running/","title":"Running daochook","tags":[],"description":"","content":"Launching daochook daochook expects a boot configuration file to be passed to its launcher when running, such as:\ndaochook.exe atom0s.ini When the launcher starts, it will take the given file name and locate it within the boot configuration directory automatically.\nThe path to the daochook boot configuration directory is: \u0026lt;Path To daochook\u0026gt;\\config\\boot\\\nBe sure to read the configurations documentation page for more information on how to configure daochook.\nPlaying On Private Servers daochook is developed and designed mainly for private server usage. It is very easy to adjust your configuration file to work with private servers that run using DOL.\nInside of your configuration file, the main setting you need to set is:\n1[daochook.patches] 2disable_encryption = 1 This will patch out the encryption of the client which DOL requires to be disabled.\nPlaying On Retail Servers daochook is developed and designed mainly for private server usage, however, it should work fine on retail servers as well.\nInside of your configuration file, the main setting you need to set is:\n1[daochook.patches] 2disable_encryption = 0 You should then properly fill out the server information you are trying to log into in order to properly connect to the retail servers using daochook\u0026rsquo;s injector.\nRetail Server Address Information Below is a table of the current retail server list. (Updated as of 10.02.2022)\nTest (PTR) Servers Server Name IP Address Port Id Hector 107.23.114.74 10622 40 Pendragon 107.23.114.74 10622 5 Normal (All Ywain) Servers Server Name IP Address Port Id Ywain1 107.23.173.143 10622 41 Ywain2 107.23.173.143 10622 49 Ywain3 107.23.173.143 10622 50 Ywain4 107.23.173.143 10622 51 Ywain5 107.23.173.143 10622 52 Ywain6 107.23.173.143 10622 53 Ywain7 107.23.173.143 10622 54 Ywain8 107.23.173.143 10622 55 Ywain9 107.23.173.143 10622 56 Ywain10 107.23.173.143 10622 57 Alternate Ruleset Servers Server Name IP Address Port Id Gaheris 107.21.60.95 10622 23 Archived Servers Server Name IP Address Port Id Akatsuki 107.23.34.34 10622 35 Avalon 107.23.214.48 10622 84 Bedevere 107.23.34.34 10622 16 Bors 107.23.18.149 10622 19 Broceliande 107.23.200.161 10622 80 Camlann 107.23.154.120 10622 89 Carnac 107.23.200.161 10622 83 Cumbria 107.23.187.235 10622 93 Dartmoor 107.23.214.48 10622 88 Deira 107.23.162.153 10622 92 Ector 107.23.210.32 10622 34 Excalibur 107.23.173.127 10622 90 Galahad 107.23.34.34 10622 10 Gareth 107.23.210.32 10622 33 Gawaine 107.23.18.149 10622 18 Glastonbury 107.23.78.91 10622 94 Guinevere 107.23.18.149 10622 15 Igraine 107.23.34.34 10622 28 Iseult 107.23.34.34 10622 20 Kay 107.23.34.34 10622 26 Lamorak 107.23.210.32 10622 32 Lancelot 107.23.34.34 10622 11 Logres 107.23.214.48 10622 87 Lyonesse 107.23.214.48 10622 85 Merlin 107.23.18.149 10622 14 Mordred 107.23.134.9 10622 31 Morgan 107.23.34.34 10622 17 Nimue 107.23.18.149 10622 22 Orance 107.23.200.161 10622 82 Palomides 107.23.18.149 10622 13 Pellinor 107.23.34.34 10622 21 Percival 107.23.18.149 10622 12 Prydwen 107.23.173.127 10622 91 Salisbury 107.23.78.91 10622 95 Stonehenge 107.23.214.48 10622 86 Tristan 107.23.34.34 10622 27 Ys 107.23.200.161 10622 81 "},{"uri":"https://daochook.github.io/developers/events/","title":"Events","tags":[],"description":"","content":"Events are one of the main ways addons can be used to interact with the game client. daochook hooks onto multiple game functions and then creates/raises an event internally when one of those functions is invoked. When this happens, the internal addon manager will raise the event in every loaded addon whom has registered one or more callback functions to the event being raised. Addons can register more than one callback to an event if needed.\nAddons are not required to register to any events in order to be considered valid. Events are entirely optional and is best to not register to any event unless you absolutely need information from it. It\u0026rsquo;s a waste of performance to register to events that you are not actually using.\nEvent Functions daochook exposes two main functions for registering and unregistering from events.\n1boolean hook.events.register(event_name, event_alias, callback_func); Parameter Name Type Description event_name string The name of the event to register this callback to. event_alias string The alias for this callback. callback_func function The function to invoke when the event is raised. Returns (boolean) True on success, false otherwise. 1boolean hook.events.unregister(event_name, event_alias); Parameter Name Type Description event_name string The name of the event to unregister the existing callback for. event_alias string The alias for the existing callback to unregister. Returns (boolean) True on success, false otherwise. Event Registration Addons can register to an event using the hook.events.register(...) function. Similarly, an addon can unregister from an event using the hook.events.unregister(...) function.\nWhen registering to an event, you can write the callback function in multiple formats. The main two formats are considered short-hand and long-hand. Generally, short-hand is the recommended means of writing code as it saves space.\nShort-hand Method 1hook.events.register(\u0026#39;load\u0026#39;, \u0026#39;load_cb\u0026#39;, function () 2 print(\u0026#39;Load event was fired.\u0026#39;); 3end); Long-hand Method 1local function load_callback() 2 print(\u0026#39;Load event was fired.\u0026#39;); 3end 4hook.events.register(\u0026#39;load\u0026#39;, \u0026#39;load_cb\u0026#39;, load_callback); Registering Multiple Callbacks If you need to register to an event multiple times, then you must pass a unique alias for each time you register to the event. For example:\n1hook.events.register(\u0026#39;load\u0026#39;, \u0026#39;load_cb1\u0026#39;, function () 2 print(\u0026#39;Load event was fired. (1)\u0026#39;); 3end); 4hook.events.register(\u0026#39;load\u0026#39;, \u0026#39;load_cb2\u0026#39;, function () 5 print(\u0026#39;Load event was fired. (2)\u0026#39;); 6end); If you do not pass a unique alias, then the existing registered callback will be overwritten.\nAvailable Events daochook currently exposes the following list of events. Click the name of the event to navigate to its specific information entry.\nEvent Name Event Description load Event raised when the addon is being loaded. unload Event raised when the addon is being unloaded. command Event raised when the game client is handling a command. message Event raised when the game client is about to print a message to the chat/combat windows. packet_recv Event raised when the game client receives a packet. packet_send Event raised when the game client sends a packet. d3d_prereset Event raised when the game client is about to reset the graphics device. d3d_postreset Event raised when the game client has finished resetting the graphics device. d3d_beginscene Event raised when the game client is beginning a new scene. d3d_endscene Event raised when the game client is ending a scene. d3d_present Event raised when the game client is presenting the scene. d3d_renderstate Event raised when the game client is setting a render state. d3d_dip Event raised when the game client is about to render a primitive. d3d_dipup Event raised when the game client is about to render a primitive. d3d_dp Event raised when the game client is about to render a primitive. d3d_dpup Event raised when the game client is about to render a primitive. Event Arguments Information Some of the events that can be raised within an addon have arguments that are passed to their callback functions. These arguments are passed as a single table to help improve performance when calling between the C++ and Lua bounds. This is similar to how C# handles events.\nIf an event has any arguments, you can find more information for those arguments in the information listed below. The argument information tables explain each of the arguments that the given event has access to. They also mark if the argument is read-only or not. When an argument is read-only, it cannot be modified or the addon will throw an error. Any argument not marked as read-only can be modified.\nWhen an argument is modified, all addons that will receive the event after yours will see the new modified value. They will also be given the ability to further modify the value if they see fit. Once all addons have handled the event, if it was not blocked, the client will process the data using the modified values as if that was the original data to begin with.\nInjected Events Events that have an e.injected argument can determine if the event came from the actual game client, or if it was injected by daochook or another addon.\nIt is best practice to not block or modify injected data as another addon has deemed it important enough to be injected. You can increase performance if you exit an event callback early if the event was injected and you don\u0026rsquo;t need to process it.\nBlocked Events Events that have an e.blocked argument can determine if the event has been blocked by daochook or another addon. Once an event has been blocked, it cannot be unblocked. Setting e.blocked to false will not change any previous true value it was set to. If you wish to block the event from reaching the client in your addon, you can set this to true to cause it to be blocked. ie. e.blocked = true;\nIt is best practice to check if an event is blocked and ignore it if you do not need to further act on it. You can increase performance if you exit an event callback early if the event was already blocked and you have no need to process it.\nEvent: load Event raised when the addon is being loaded.\nClick for more event information.. 1hook.events.registered(\u0026#39;load\u0026#39;, \u0026#39;load_cb\u0026#39;, function () 2end); Argument Name Type Description None. \u0026mdash; \u0026mdash; Event: unload Event raised when the addon is being unloaded.\nClick for more event information.. 1hook.events.registered(\u0026#39;unload\u0026#39;, \u0026#39;unload_cb\u0026#39;, function () 2end); Argument Name Type Description None. \u0026mdash; \u0026mdash; Event: command Event raised when the game client is handling a command.\nClick for more event information.. 1hook.events.registered(\u0026#39;command\u0026#39;, \u0026#39;command_cb\u0026#39;, function (e) 2end); Argument Name Type Description e.mode number [Read Only] The command mode. e.imode number [Read Only] The command input mode. e.command string [Read Only] The command string. e.modified_mode number The modified command mode. e.modified_imode number The modified command input mode. e.modified_command string The modified command string. e.injected boolean [Read Only] Flag that states if the event was injected by daochook or another addon. e.blocked boolean Flag that states if the event has been blocked by daochook or another addon. Event: message Event raised when the game client is about to print a message to the chat/combat windows.\nClick for more event information.. 1hook.events.registered(\u0026#39;message\u0026#39;, \u0026#39;message_cb\u0026#39;, function (e) 2end); Argument Name Type Description e.mode number [Read Only] The message mode. e.message string [Read Only] The message string. e.modified_mode number The modified message mode. e.modified_message string The modified message string. e.injected boolean [Read Only] Flag that states if the event was injected by daochook or another addon. e.blocked boolean Flag that states if the event has been blocked by daochook or another addon. Event: packet_recv Event raised when the game client receives a packet.\nClick for more event information.. 1hook.events.registered(\u0026#39;packet_recv\u0026#39;, \u0026#39;packet_recv_cb\u0026#39;, function (e) 2end); Argument Name Type Description e.opcode number [Read Only] The packet opcode. e.unknown number [Read Only] Unknown. (Generally zero.) e.session_id number [Read Only] The client session id. e.data string [Read Only] The packet data. (As a string literal.) e.data_raw void* [Read Only] The packet data. (As a raw pointer, for use with FFI.) e.data_modified string The modified packet data. (As a string literal.) e.data_modified_raw void* The modified packet data. (As a raw pointer, for use with FFI.) e.size number [Read Only] The packet size. e.state number [Read Only] The game state pointer. e.injected boolean [Read Only] Flag that states if the event was injected by daochook or another addon. e.blocked boolean Flag that states if the event has been blocked by daochook or another addon. Event: packet_send Event raised when the game client sends a packet.\nClick for more event information.. 1hook.events.registered(\u0026#39;packet_send\u0026#39;, \u0026#39;packet_send_cb\u0026#39;, function (e) 2end); Argument Name Type Description e.opcode number [Read Only] The packet opcode. e.data string [Read Only] The packet data. (As a string literal.) e.data_raw void* [Read Only] The packet data. (As a raw pointer, for use with FFI.) e.data_modified string The modified packet data. (As a string literal.) e.data_modified_raw void* The modified packet data. (As a raw pointer, for use with FFI.) e.size number [Read Only] The packet size. e.parameter number [Read Only] The packet parameter. e.injected boolean [Read Only] Flag that states if the event was injected by daochook or another addon. e.blocked boolean Flag that states if the event has been blocked by daochook or another addon. Event: d3d_prereset Event raised when the game client is about to reset the graphics device.\nClick for more event information.. 1hook.events.registered(\u0026#39;d3d_prereset\u0026#39;, \u0026#39;d3d_prereset_cb\u0026#39;, function (e) 2end); Argument Name Type Description e.back_buffer_width number [Read Only] The back buffer width. e.back_buffer_height number [Read Only] The back buffer height. e.back_buffer_format number [Read Only] The back buffer format. e.back_buffer_count number [Read Only] The back buffer count. e.multisample_type number [Read Only] The multisample type. e.multisample_quality number [Read Only] The multisample quality. e.swap_effect number [Read Only] The swap effect. e.device_window number [Read Only] The device window handle. e.windowed boolean [Read Only] The windowed mode flag. e.enable_auto_depth_stencil boolean [Read Only] The enable auto depth stencil flag. e.auto_depth_stencil_format number [Read Only] The auto depth stencil format. e.flags number [Read Only] The flags. e.fullscreen_refresh_rate_in_hz number [Read Only] The fullscreen refresh rate in hz. e.presentation_interval number [Read Only] The presentation interval. Event: d3d_postreset Event raised when the game client has finished resetting the graphics device.\nClick for more event information.. 1hook.events.registered(\u0026#39;d3d_postreset\u0026#39;, \u0026#39;d3d_postreset_cb\u0026#39;, function (e) 2end); Argument Name Type Description e.back_buffer_width number [Read Only] The back buffer width. e.back_buffer_height number [Read Only] The back buffer height. e.back_buffer_format number [Read Only] The back buffer format. e.back_buffer_count number [Read Only] The back buffer count. e.multisample_type number [Read Only] The multisample type. e.multisample_quality number [Read Only] The multisample quality. e.swap_effect number [Read Only] The swap effect. e.device_window number [Read Only] The device window handle. e.windowed boolean [Read Only] The windowed mode flag. e.enable_auto_depth_stencil boolean [Read Only] The enable auto depth stencil flag. e.auto_depth_stencil_format number [Read Only] The auto depth stencil format. e.flags number [Read Only] The flags. e.fullscreen_refresh_rate_in_hz number [Read Only] The fullscreen refresh rate in hz. e.presentation_interval number [Read Only] The presentation interval. Event: d3d_beginscene Event raised when the game client is beginning a new scene.\nClick for more event information.. 1hook.events.registered(\u0026#39;d3d_beginscene\u0026#39;, \u0026#39;d3d_beginscene_cb\u0026#39;, function () 2end); Argument Name Type Description None. \u0026mdash; \u0026mdash; Event: d3d_endscene Event raised when the game client is ending a scene.\nClick for more event information.. 1hook.events.registered(\u0026#39;d3d_endscene\u0026#39;, \u0026#39;d3d_endscene_cb\u0026#39;, function () 2end); Argument Name Type Description None. \u0026mdash; \u0026mdash; Event: d3d_present Event raised when the game client is presenting the scene.\nClick for more event information.. 1hook.events.registered(\u0026#39;d3d_present\u0026#39;, \u0026#39;d3d_present_cb\u0026#39;, function () 2end); Argument Name Type Description None. \u0026mdash; \u0026mdash; Event: d3d_renderstate Event raised when the game client is setting a render state.\nClick for more event information.. 1hook.events.registered(\u0026#39;d3d_renderstate\u0026#39;, \u0026#39;d3d_renderstate_cb\u0026#39;, function (e) 2end); Argument Name Type Description e.state number [Read Only] The render state id. e.value number The render state value. e.blocked boolean Flag that states if the event has been blocked by daochook or another addon. Event: d3d_dip Event raised when the game client is about to render a primitive.\nClick for more event information.. 1hook.events.registered(\u0026#39;d3d_dip\u0026#39;, \u0026#39;d3d_dip_cb\u0026#39;, function (e) 2end); Argument Name Type Description e.primitive_type number [Read Only] The primitive type. e.base_vertex_index number [Read Only] The primitive base vertex index. e.min_index number [Read Only] The primitive min index. e.num_vertices number [Read Only] The primitive num vertices. e.start_index number [Read Only] The primitive start index. e.prim_count number [Read Only] The primitive primitive count. e.blocked boolean Flag that states if the event has been blocked by daochook or another addon. Event: d3d_dipup Event raised when the game client is about to render a primitive.\nClick for more event information.. 1hook.events.registered(\u0026#39;d3d_dipup\u0026#39;, \u0026#39;d3d_dipup_cb\u0026#39;, function (e) 2end); Argument Name Type Description e.primitive_type number [Read Only] The primitive type. e.min_vertex_index number [Read Only] The primitive min vertex index. e.num_vertex_indices number [Read Only] The primitive num vertex indices. e.primitive_count number [Read Only] The primitive primitive count. e.index_data number [Read Only] The primitive index data. e.index_data_format number [Read Only] The primitive index data format. e.vertex_stream_zero_data number [Read Only] The primitive vertex stream zero data. e.vertex_stream_zero_stride number [Read Only] The primitive vertex stream zero stride. e.blocked boolean Flag that states if the event has been blocked by daochook or another addon. Event: d3d_dp Event raised when the game client is about to render a primitive.\nClick for more event information.. 1hook.events.registered(\u0026#39;d3d_dp\u0026#39;, \u0026#39;d3d_dp_cb\u0026#39;, function (e) 2end); Argument Name Type Description e.primitive_type number [Read Only] The primitive type. e.start_vertex number [Read Only] The primitive start vertex. e.primitive_count number [Read Only] The primitive count. e.blocked boolean Flag that states if the event has been blocked by daochook or another addon. Event: d3d_dpup Event raised when the game client is about to render a primitive.\nClick for more event information.. 1hook.events.registered(\u0026#39;d3d_dpup\u0026#39;, \u0026#39;d3d_dpup_cb\u0026#39;, function (e) 2end); Argument Name Type Description e.primitive_type number [Read Only] The primitive type. e.primitive_count number [Read Only] The primitive count. e.vertex_stream_zero_data number [Read Only] The primitive vertex stream zero data. e.vertex_stream_zero_stride number [Read Only] The primitive vertex stream zero stride. e.blocked boolean Flag that states if the event has been blocked by daochook or another addon. "},{"uri":"https://daochook.github.io/usage/commands/","title":"In-Game Commands","tags":[],"description":"","content":"daochook includes several custom commands that are built-in, which you can access by typing into the game chat like a normal slash command.\nCommands follow the below syntax for arguments:\nSyntax Meaning arg The argument is required and should be entered exactly how it\u0026rsquo;s displayed. \u0026lt;arg\u0026gt; The argument is required, a value should be given. \u0026lt;arg...\u0026gt; The argument is required, one or more values should be given. (arg|arg) The argument is required, one of the displayed values should be given. [arg] The argument is optional, a value is not required. [arg...] The argument is optional, one or more values are allowed. This list does not include any commands implemented from an addon!\nThese are simply the commands built into daochook directly.\nCommand: /addon /addon load \u0026lt;name\u0026gt; Loads the an addon by its name. /addon unload \u0026lt;name\u0026gt; Unloads an addon by its name. /addon unloadall Unloads all currently loaded addons. /addon kill \u0026lt;name\u0026gt; Kills an addon by its name. (Forces it to stop and unload.) /addon reload \u0026lt;name\u0026gt; Reloads an addon by its name. /addon exec \u0026lt;name\u0026gt; \u0026lt;lua_string\u0026gt; Executes a string of Lua code within the given addons Lua state. /addon list Lists the currently loaded addons. /addon info \u0026lt;name\u0026gt; Displays information about the given addon. /addon link \u0026lt;name\u0026gt; Opens the given addons homepage url in the systems default browser. Command: /ambient /ambient Toggles the ambient lighting feature on or off. /ambient \u0026lt;0 | 1\u0026gt; Sets the ambient lighting feature on or off. /ambient \u0026lt;r\u0026gt; \u0026lt;g\u0026gt; \u0026lt;b\u0026gt; Sets the ambient lighting color. Command: /fillmode /fillmode Toggles the fill mode feature on or off. This feature toggles wireframe rendering on or off.\nCommand: /fog /fog Toggles overriding the games fog on and off. This feature, when enabled, will disable the game from rendering fog.\nCommand: /zbuffer /zbuffer Toggles overriding the games zbuffer on and off. This feature, when enabled, will disable the games z-buffer rendering state.\n"},{"uri":"https://daochook.github.io/installation/install_zip/","title":"Install via Zip","tags":[],"description":"","content":" It is recommended that you install daochook via a Git client for easy updates. See Install via Git if you are comfortable doing so.\nPicking An Installation Folder When picking a folder to install daochook to, it is important that you are NOT breaking the following guidelines.\ndaochook should NOT be installed into a system protected folder.\nThis means it should not be put into folders (or folders within) such as:\nC:\\Program Files (x86)\\, C:\\Program Files\\, C:\\Windows\\\ndaochook should NOT be installed into the game client folder!\nYou should never install daochook into the game client folder for safety reasons.\nIt should be in its own separate folder entirely!\nA recommended and safe installation location would be something such as:\nC:\\daochook\\ C:\\Users\\Your_Username_Here\\Desktop\\daochook\\ Z:\\Some\\Other\\Folder\\daochook\\ Downloading and Installing You can download the latest package of daochook here: https://github.com/daochook/daochook/archive/refs/heads/main.zip\nOnce downloaded, navigate to the parent folder you wish to install daochook to and extract the zip contents there.\nFor example: C:\\daochook\\\n"},{"uri":"https://daochook.github.io/developers/namespaces/","title":"Functions &amp; Namespaces","tags":[],"description":"","content":"daochook includes a handful of various helper functions that are exposed to each addons Lua state. These functions are separated into namespaces that make it cleaner and easier to read when being accessed. Below is a table of each of the namespaces that are exposed from daochook.\nNote: This page does not include the additional functions created by or added to the given namespaces via the included addon libs. Those have their own documentation pages.\nClick the namespace name to go to that namespaces individual documentation page.\nNamespace Name Description bits Contains functions related to bit and byte packing/unpacking. events Contains functions related to daochook events. extensions Contains functions that extend default Lua types. fs Contains functions related to file I/O. game Contains functions related to game client functions and information. hook Contains functions related to daochook functions and information. imgui Contains functions related to ImGui. memory Contains functions related to memory read/write operations. misc Contains miscellaneous functions that don\u0026rsquo;t fit into another namespace. regex Contains functions related to regular expression operations. tasks Contains functions related to tasks. time Contains functions related to time. "},{"uri":"https://daochook.github.io/features/","title":"Features","tags":[],"description":"","content":"Because daochook is injected into the game client, it can hook onto the game in various ways. This allows for many features that are not generally possible with just external tools alone. Check out the various features of daochook below for more information.\nCustom Launcher (Injector) daochook ships with its own basic command line injector/launcher. This is to ensure that daochook is injected properly and as soon as possible in the launching of the game client. (Other injectors are supported as long as they are able to call exported functions.)\nClick to read more... The included injector also allows for quick login access using any version of the client that supports it.\n1// General Usage 2daochook.exe [configname.ini] Injected Hook As previously mentioned, daochook is injected directly into the game client (game.dll). This gives the project an advantage over other external third-party tools as it can directly access the games data, memory and functions.\ndaochook also hooks onto the games Direct3D device to allow for custom rendering and additional rendering related features. (See below for more info.)\nHooked Game Functions daochook takes advantage of being injected by hooking onto several major game functions including:\n(Chat) Command Handler - The game function responsible for handling all command input within the client. (Typed, macros, built-in system, menus, etc.) (Chat) Message Handler - The game function responsible for outputting messages to the chat/combat log window(s). (Packets) Incoming Packet Handler - The game function responsible for handling incoming packets from the server. (Packets) Outgoing Packet Handler - The game function responsible for handling outgoing packets from the client. By hooking onto these functions, daochook is able to do multiple things including:\nRead: See any time the function(s) are called and log/view the parameters they were called with. Block: Prevent the game client from ever seeing the call was made. Modify: Alter the parameters to change how the call will actually be invoked by the game client. Inject: Manually invoke the original function to easily inject custom data. Click to read more... For example, let\u0026rsquo;s look closer at the (Chat) Command Handler function. This function is responsible for handling all command input within the client. This function is called whenever the user types something into chat, uses a slash command (ie. /wave), presses a macro, clicks a button that will cause a command to be parsed/interpreted, etc.\nThe function looks like this:\n1void handle_cmd(const char* command, int32_t mode) 2{ 3 // ... 4} The game client also has a secondary input mode pointer that is used with command input that is not passed as a normal argument, it is instead a global variable.\nAny time a command is to be handled by the client it will pass through this function. Once hooked, daochook has the ability to fully take control of the function call. Each time the function is called, daochook will first attempt to \u0026lsquo;handle\u0026rsquo; it. This means that the command will go through a \u0026lsquo;process\u0026rsquo; chain to see if anything can make use of it before it eventually gets sent to the client to be handled as normal.\nThe order in which things happen looks like this:\nGame calls original command handler function. daochook intercepts the call, forwards it to its own internal handler. daochook checks for any built-in commands it will handle first. (ie. /addon) If daochook handles the command, it is blocked from being seen by the client. If daochook does not handle the command, the chain continues. daochook forwards the command to its internal addon manager. The addon manager sends the command to all loaded addons that have a valid command event handler registered. If an addon handles the command, it is blocked from being seen by the client. If no addon handles the command, the chain continues. If nothing has handled the command, it is sent to the client as normal. During this chain, both daochook and/or an addon have the chance to alter any of the parameters of the original call. For example, if the command being handled is /wave and instead you want to do /shrug, you can easily do this with an addon.\nThis can also be used to modify incoming and outgoing packets, or out-right block packets from being sent or received!\nDirect3D Hook Along with hooking various game functions, daochook also hooks onto the games Direct3D device. This allows the hook to render its own things into the game scene, either in 2D or 3D. The main purpose for this however, is to allow the use of ImGui to render custom in-game UI elements from addons.\nCustom UI via ImGui daochook implements and [fully] exposes ImGui to Lua for addons to make use of. You can easily create your own custom UI elements that can interact with the game directly, display useful / important game information, and much much more!\nYou can find more information about ImGui here: https://github.com/ocornut/imgui\nAddons, Powered By Lua! daochook includes a powerful custom addon system, backed by Lua. (LuaJIT to be more specific, via MoonJIT)\nAddons are sandboxed/isolated Lua scripts that can be used to greatly enhance the game play experience of the game. Addons can do a wide varity of things and are able to directly communicate with the game client in multiple ways.\nYou can access all of the hooked functions directly to allow your addon to easily inject commands, chat messages, packets and more.\nAddons also have full access to ImGui, allowing you to create your own feature-rich UI\u0026rsquo;s.\nWith the use of LuaJIT, addons also have access to C style structure definitions, casting, and function calling, allowing addons to even further extend their usefulness by directly interacting with game data and functions.\nFor example, here is a simple addon that will handle the command /derp. Anytime this command is used, it will instead use /wave.\n1addon.name = \u0026#39;example\u0026#39;; 2addon.author = \u0026#39;atom0s\u0026#39;; 3addon.desc = \u0026#39;A simple example addon.\u0026#39;; 4addon.link = \u0026#39;https://atom0s.com\u0026#39;; 5addon.version = \u0026#39;1.0\u0026#39;; 6 7require \u0026#39;common\u0026#39;; 8require \u0026#39;daoc\u0026#39;; 9 10hook.events.register(\u0026#39;command\u0026#39;, \u0026#39;command_cb\u0026#39;, function (e) 11 -- Parse the command into arguments.. 12 local args = e.modified_command:args(); 13 14 -- Command: /derp 15 if (#args \u0026gt;= 1 and (args[1]:ieq(\u0026#39;derp\u0026#39;) and e.imode == daoc.chat.input_mode.slash) or args[1]:ieq(\u0026#39;/derp\u0026#39;)) then 16 -- Mark the command as handled, prevents the game from seeing it.. 17 e.blocked = true; 18 19 -- Inject a new command into the handler.. 20 daoc.chat.exec(daoc.chat.command_mode.typed, daoc.chat.input_mode.normal, \u0026#39;/wave\u0026#39;); 21 return; 22 end 23end); For full information on addons, please check the developer documentation section of this site!\n"},{"uri":"https://daochook.github.io/installation/","title":"Download &amp; Install","tags":[],"description":"","content":"daochook is designed to be self-contained and easy to install (and uninstall).\nBefore installing daochook, be sure that your system meets the minimum requirements and that you have all system requirements for the project installed.\nYou can find a full list of requirements here: Click Here\n"},{"uri":"https://daochook.github.io/usage/","title":"Usage","tags":[],"description":"","content":"This section covers the various methods of using daochook including configurations, in-game commands and more.\n"},{"uri":"https://daochook.github.io/developers/namespaces/bits/","title":"bits","tags":[],"description":"","content":"This namespace is currently unused.\n"},{"uri":"https://daochook.github.io/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://daochook.github.io/credits/","title":"Credits","tags":[],"description":"","content":"daochook is created with ❤️ by atom0s\nYou can support my work via the following:\nSponsor via GitHub Sponsor via Patreon Donate via PayPal The following page is dedicated to the various tools and third-party projects / libraries that daochook makes use of.\nDevelopment Discussions / Research Credits towbes Development Tools Credits VSCode Insiders: https://code.visualstudio.com/insiders/ (Main development environment.) CMake: https://cmake.org/ (Build tooling.) GitHub: https://github.com/ (Source code repository.) The following VSCode extensions are used with the development of daochook:\nC/C++ (Microsoft) CMake (twxs) CMake Tools (Microsoft) Even Better TOML (tamasfe) Instant Markdown (David Bankier) Lipsum Generator (Nino Maruszewski) Lua (sumneko) Lua Debug (actboy168) Third-Party Library Credits Microsoft Detours: https://github.com/microsoft/Detours (API and function hooking.) ImGui: https://github.com/ocornut/imgui (Custom in-game gui.) MoonJIT: https://github.com/moonjit/moonjit (Lua scripting engine for addons.) lstruct: http://www.inf.puc-rio.br/~roberto/struct/ (Lua extension for binary data reading/writing.) luasocket: https://github.com/lunarmodules/luasocket (Lua extension for web sockets and requests.) luasec: https://github.com/brunoos/luasec (Lua extension for HTTPS sockets and requests.) openssl: https://github.com/openssl/openssl (Library used for SSL.) sol3: https://github.com/ThePhD/sol2 (Lua wrapper library.) Documentation Credits Hugo - https://gohugo.io/ (Static website generator.) learn: https://learn.netlify.app/en/ (Theme for Hugo.) "},{"uri":"https://daochook.github.io/developers/","title":"Developers","tags":[],"description":"","content":"daochook allows anyone to further expand on its features through its custom addon system. Addons are powered by Lua (more specifically, LuaJIT via MoonJIT).\nWhat is Lua? Lua is a powerful, fast and lightweight scripting language that can be embedded into nearly any kind of project.\nLua combines simple procedural syntax with powerful data description constructs based on associative arrays and extensible semantics. Lua is dynamically typed, runs by interpreting bytecode for a register-based virtual machine, and has automatic memory management with incremental garbage collection, making it ideal for configuration, scripting, and rapid prototyping.\ndaochook makes use of LuaJIT, via the fork called MoonJIT. You can find more information about each of these projects here:\nLua: http://www.lua.org/about.html LuaJIT: https://luajit.org/ MoonJIT: https://github.com/moonjit/moonjit What are addons? Addons are individual isolated/sandboxed instances of a Lua state that loads/runs a given base Lua script. This script will remain loaded until it either is manually unloaded by the player or told to unload otherwise by other means. (ie. If another addon tells it to unload, or it has an error etc.) Addons generally function by registering to predefined events exposed by daochook which allows them to react to various things. An addon can also do something as simple as patching part of the game client when it loads and then nothing else for the duration that it is loaded.\nBecause addons have the potential to throw an error, they are ran in isolated/sandboxed instances of Lua. This means that every loaded addon has its own Lua state. Addons are considered \u0026lsquo;dumb\u0026rsquo; in the sense that they are not aware of another addon being loaded/existing because of this sandboxed setup. If an addon throws an error, instead of causing all addons to stop working, it simply causes only the single addon that errored to stop.\ndaochook exposes a large amount of helpful functions to each addon that implements various things such as:\nAccess to certain game functions. Access to game memory through read/write helpers. Access to additional file IO helpers. Access to additional regex helpers. Access to additional time related helpers. And more! Since daochook is also using LuaJIT, addons have access to its FFI library, which even further greatly expands on the features that addons can make use of. FFI, which stands for foreign function interface, allows you to make use of calling external C functions, using C data structures, and casting direct memory to function definitions / memory structures all from within Lua. This greatly enhances what can be done from an addon.\nHow do addons work? As mentioned above, addons run isolated in their own Lua state. Once an addon is loaded, any time a predefined event occurs within daochook, the event will then be forwarded and raised in all loaded addons that have registered to the given event.\nFor example, an event that daochook exposes is command. This event is raised any time the game client is attempting to process a command that was sent to the games internal command handler. (ie. When typing into the chat box, using a \u0026lsquo;slash\u0026rsquo; command such as /wave, using a macro, etc.)\nWhen the event is raised, it will be passed to daochook\u0026rsquo;s internal addon manager, which then loops through all loaded addons, and raises the event inside each addon that has a valid registered event callback for the event. Addons can register to an event multiple times if needed as well.\nThese events allow addons to react to various aspects of the game.\nAdditional Lua Information Whether you are new to Lua or a seasoned pro, here are some links to help get you started or freshen up on your Lua knowledge.\nLua Project Links Lua Manual 5.1: http://www.lua.org/manual/5.1/ Lua Manual 5.2: http://www.lua.org/manual/5.2/ Lua Manual 5.3: http://www.lua.org/manual/5.3/ Note: MoonJIT, which is used within daochook implements LuaJIT with parts of Lua 5.2 and 5.3 added. Not all features of 5.2/5.3 are available though. Programming In Lua (EBook): http://www.lua.org/pil/contents.html Lua Wiki: http://lua-users.org/wiki/ Lua Wiki Tutorial List: http://lua-users.org/wiki/TutorialDirectory Lua Mailing List: http://www.lua.org/lua-l.html Lua Forums: https://luaforum.com/index.php Lua Tips and Tricks / Performance Information http://www.lua.org/gems/sample.pdf http://lua-users.org/wiki/OptimisationTips https://web.archive.org/web/20100609035807/https://stackoverflow.com/questions/89523/lua-patterns-tips-and-tricks https://stackoverflow.com/questions/154672/what-can-i-do-to-increase-the-performance-of-a-lua-program/12865406#12865406 Metatables http://www.lua.org/pil/13.html http://phrogz.net/lua/LearningLua_MetatableEvents.html http://phrogz.net/lua/LearningLua_ValuesAndMetatables.html http://www.dreamincode.net/forums/topic/175747-lua-metatables-tutorial/ Examples / Tutorials http://lua-users.org/wiki/SampleCode http://lua-users.org/wiki/TutorialDirectory "},{"uri":"https://daochook.github.io/developers/namespaces/events/","title":"events","tags":[],"description":"","content":"The events namespace contains functions that are used for working with daochook events.\nFunctions exposed by this namespace are accessed via the prefix: hook.events.\nFunctions register Registers a new callback function to the given event.\n1boolean hook.events.register(event_name, event_alias, callback_func); Parameter Name Type Description event_name string The name of the event to register this callback to. event_alias string The alias for this callback. callback_func function The function to invoke when the event is raised. Returns (boolean) True on success, false otherwise. unregister Unregisters an existing callback from the given event.\n1boolean hook.events.unregister(event_name, event_alias); Parameter Name Type Description event_name string The name of the event to unregister the existing callback for. event_alias string The alias for the existing callback to unregister. Returns (boolean) True on success, false otherwise. "},{"uri":"https://daochook.github.io/developers/namespaces/extensions/","title":"extensions","tags":[],"description":"","content":"The extensions namespace is not actually a namespace that is accessible directly. Instead, this namespace is used, internally, to extend the functionality of Lua\u0026rsquo;s base types. (ie. boolean, coroutine, function, number, string, table, etc.)\ncoroutine Extensions kill Kills the current coroutine.\n1coroutine.kill(); Parameter Name Type Description None. Returns None. sleep Yields the current coroutine, sleeping for the given delay of time.\n1coroutine.sleep(delay); Parameter Name Type Description delay number The time delay to sleep for. Returns None. sleepf Yields the current coroutine, sleeping for the given delay of frames.\n1coroutine.sleepf(delay); Parameter Name Type Description delay number The frame delay to sleep for. Returns None. table Extensions toliteral Converts the given table of numbers (bytes) to a string literal.\n1string table.toliteral(table); Parameter Name Type Description table table The table to convert to a string literal. Returns (string) The converted table to a string literal. "},{"uri":"https://daochook.github.io/developers/namespaces/filesystem/","title":"fs (File System)","tags":[],"description":"","content":"The fs namespace contains functions that are used for working with file system operations. Lua does contain some basic file I/O functionality, but this namespace includes a handful of additional functions that make up for where Lua is lacking.\nThese file system functions make use of the C++ std::filesystem header. The functions are named the same/similar.\nFor more information on those functions, please visit: https://en.cppreference.com/w/cpp/filesystem\nFunctions exposed by this namespace are accessed via the prefix: hook.fs.\nFunctions create_directory, create_dir Creates the given directory. Any folder within the given path that do not exist will also be created.\n1boolean hook.fs.create_directory(path); 2boolean hook.fs.create_dir(path); Parameter Name Type Description path string The name, or path, of the folder to create. Returns (boolean) True on success, false otherwise. current_directory, current_dir Returns, or sets, the current directory.\n1string hook.fs.current_directory(); 2string hook.fs.current_dir(); 3 4boolean hook.fs.current_directory(path); 5boolean hook.fs.current_dir(path); Parameter Name Type Description path string [Optional] The path to set the current directory to, if setting. Returns get: (string) The current directory path. set: (boolean) True on success, false otherwise. equivalent, equals Returns if two paths are the equal.\n1boolean hook.fs.equivalent(path1, path2); 2boolean hook.fs.equals(path1, path2); Parameter Name Type Description path1 string The first path to compare. path2 string The second path to compare. Returns (boolean) True if the paths are equal, false otherwise. exists Returns if the given path exists. Can be a file or folder path.\n1boolean hook.fs.exists(path); Parameter Name Type Description path string The path to check. Returns (boolean) True if the path exists, false otherwise. get_directory, get_dir Returns the contents of the given directory.\n1table|nil hook.fs.get_directory(path); 2table|nil hook.fs.get_dir(path); Parameter Name Type Description path string The path to obtain the contents of. mask string [Optional] The filter mask to apply when returning files. subs boolean [Optional] Flag that states if sub folders should be included. Returns (table | nil) Table of the directory contents on success, nil otherwise. normalize Returns the normalized path.\n1string|nil hook.fs.normalize(path); Parameter Name Type Description path string The path to normalize. Returns (string | nil) The normalized path on success, nil otherwise. remove Removes, or deletes, the given path. Can be a file or folder path.\n1boolean hook.fs.remove(path); Parameter Name Type Description path string The path to remove. Returns (boolean) True on success, false otherwise. rename Renames the file or folder.\n1boolean hook.fs.rename(path); Parameter Name Type Description path string The path to rename. Returns (boolean) True on success, false otherwise. size Returns the size of the given path. Can be a file or folder.\n1number hook.fs.size(path); Parameter Name Type Description path string The path to obtain the size of. Returns (number) The size on success, 0 otherwise. space Returns the space of the given path. Can be a file or folder.\n1table|nil hook.fs.space(path); Parameter Name Type Description path string The path to obtain the space of. Returns (table | nil) Table containing the space information on success, nil otherwise. The returned table contains the following properties:\navailable (number) - The total size of the file system. (in bytes) capacity (number) - The free space of the file system. (in bytes) free (number) - The free space of the file system, to a non-privileged process. (in bytes) status Returns the status of the given path. Can be a file or folder.\n1table|nil hook.fs.status(path); Parameter Name Type Description path string The path to obtain the status of. Returns (table | nil) Table containing the status information on success, nil otherwise. The returned table contains the following properties:\npermissions (number) - The file or folder permissions. exists (boolean) - Flag that states if the path exists. is_regular_file (boolean) - Flag that states if the path is a regular file. is_directory (boolean) - Flag that states if the path is a directory. is_block_file (boolean) - Flag that states if the path is a block file. is_character_file (boolean) - Flag that states if the path is a character file. is_fifo (boolean) - Flag that states if the path is a FIFO file. is_socket (boolean) - Flag that states if the path is a socket. is_symlink (boolean) - Flag that states if the path is a symbolic link. Properties preferred_separator Contains the preferred slash character for paths.\n1local sep = hook.fs.preferred_separator; 2print(sep); -- Prints \\ "},{"uri":"https://daochook.github.io/developers/namespaces/game/","title":"game","tags":[],"description":"","content":"The game namespace contains functions that daochook has either hooked onto, or needed to interact with from within the hook due to either the calling convention being unfriendly with FFI or similar. These are generally wrappers that are just forwarded to Lua, giving addons access to call them.\nFunctions exposed by this namespace are accessed via the prefix: game.\nFunctions get_version_mode Returns the internal mode enumeration value that was used to read the games client version information.\nIt is recommended that addons do no use this value as it can change without notice, and the returned value can mean something different in future updates.\n1number game.get_version_mode(); Parameter Name Type Description None. Returns (number) The version mode enumeration value. The version mode values that this function can return explains what version information values should be available/populated.\n0 - Flags, Major, Minor1, Minor2, Revision, Build 1 - Flags, Major, Minor1, Minor2 2 - Major, Minor1, Minor2 3 - Major, Minor1 get_version_flags Returns the game clients version flags.\n1number game.get_version_flags(); Parameter Name Type Description None. Returns (number) The version flags value if available, 0 otherwise. get_version_major Returns the game clients version major value.\n1number game.get_version_major(); Parameter Name Type Description None. Returns (number) The version major value if available, 0 otherwise. get_version_minor1 Returns the game clients version minor1 value.\n1number game.get_version_minor1(); Parameter Name Type Description None. Returns (number) The version minor value if available, 0 otherwise. get_version_minor2 Returns the game clients version minor2 value.\n1number game.get_version_minor2(); Parameter Name Type Description None. Returns (number) The version minor value if available, 0 otherwise. get_version_revision Returns the game clients version revision value.\n1number game.get_version_revision(); Parameter Name Type Description None. Returns (number) The version revision value if available, 0 otherwise. get_version_build Returns the game clients version build value.\n1number game.get_version_build(); Parameter Name Type Description None. Returns (number) The version build value if available, 0 otherwise. get_version_id Returns the daochook internal version id specifier.\nIt is recommended that addons do no use this value as it can change without notice, and the returned value can mean something different in future updates.\n1number game.get_version_id(); Parameter Name Type Description None. Returns (number) The version id enumeration value. The list of values that this function can return are not intended for use by addons. Therefore the list will not be shared publicly. This value is used internally by daochook to tell what client version is running. Addons can determine that information by using the various other get_version_xxx functions. The values this function returns are subject to change without warning, it is not recommended to rely on this function in your addons.\nget_game_state Returns the game state pointer.\n1number game.get_game_state(); Parameter Name Type Description None. Returns (number) The game state pointer if valid, 0 otherwise. get_global_value Calls a game function that is used to get a global numerical value.\n1number game.get_global_value(index); Parameter Name Type Description index number The value index to return. Returns (number) The global numerical value at the given index. get_entity_index_by_objectid Calls a game function that is used to get an entity index by its object id.\n1number game.get_entity_index_by_objectid(object_id); Parameter Name Type Description object_id number The entity object id to obtain the index of. Returns (number) The entity index on success, -1 otherwise. get_entity_string Calls a game function that is used to return an entity related string.\n1string game.get_entity_string(table_index, entity_index); Parameter Name Type Description table_index number The table index of the string to obtain. entity_index number The entity index to obtain the string for. Returns (string) The entity string. The table index values are:\n0 - String table that contains entity titles. 1 - Unknown. 2 - Unknown. 3 - String table that contains entity names. 4 - Unknown. exec_command Calls the games input command handler, executing the given command.\n1game.exec_command(mode, imode, command); Parameter Name Type Description mode number The command mode. imode number The command input mode. command string The command string. Returns None. The command mode values are:\n0 - The command should be executed as player input. 1 - The command should be executed as a macro. 2 - The command should be executed as the client/system. The command input mode values are:\n0 - The command should be executed as if it was started by pressing Enter. 1 - The command should be executed as if it was started by pressing /. 2 - The command should be executed as if it was started by pressing ]. add_message Calls the games output message handler, printing the given message to the chat/combat log(s).\n1game.add_message(mode, message); Parameter Name Type Description mode number The message mode. message string The message string. Returns None. recv_packet Calls the games packet handler function, sending the given packet to the client as if the server sent it.\n1game.recv_packet(opcode, packet); Parameter Name Type Description opcode number The packet opcode. packet table The packet data, as a table of bytes. Returns None. send_packet Calls the games packet send function, sending the given packet to the server as if the client sent it.\n1game.send_packet(opcode, packet, parameter); Parameter Name Type Description opcode number The packet opcode. packet table The packet data, as a table of bytes. parameter number The packet parameter. Returns None. "},{"uri":"https://daochook.github.io/developers/namespaces/hook/","title":"hook","tags":[],"description":"","content":"The hook namespace contains functions that directly interact with daochook.\nFunctions exposed by this namespace are accessed via the prefix: hook.\nFunctions get_hook_path Returns the path to where daochook is installed.\n1string hook.get_hook_path(); Parameter Name Type Description None. Returns (string) The path where daochook is installed. get_hook_base Returns the base address of daochook in the current process.\n1number hook.get_hook_base(); Parameter Name Type Description None. Returns (number) The base address of daochook in the current process. get_game_path Returns the path to where the game client is installed.\n1string hook.get_game_path(); Parameter Name Type Description None. Returns (string) The path where the game client is installed. get_game_base Returns the base address of game.dll in the current process.\n1number hook.get_game_base(); Parameter Name Type Description None. Returns (number) The base address of the game.dll module in the current process. get_game_size Returns the size of the game.dll module.\n1number hook.get_game_size(); Parameter Name Type Description None. Returns (number) The size of the game.dll module. get_game_hwnd Returns the window handle of the main game window.\n1number hook.get_game_hwnd(); Parameter Name Type Description None. Returns (number) The window handle of main game window. get_d3d9 Returns the games IDirect3D9* device pointer.\n1userdata hook.get_d3d9(); Parameter Name Type Description None. Returns (userdata) The games IDirect3D9* device pointer. get_d3d9dev Returns the games IDirect3DDevice9* device pointer.\n1userdata hook.get_d3d9dev(); Parameter Name Type Description None. Returns (userdata) The games IDirect3DDevice9* device pointer. get_use_ambient_override Returns the current state of the ambient override feature.\n1boolean hook.get_use_ambient_override(); Parameter Name Type Description None. Returns (boolean) The current state of the feature. set_use_ambient_override Sets the ambient override feature on or off.\n1hook.set_use_ambient_override(flag); Parameter Name Type Description flag boolean Flag that states if the feature should be enabled or disabled. Returns None. get_ambient_color Returns the ambient color override value.\n1number hook.get_ambient_color(); Parameter Name Type Description None. Returns (number) The ambient color that will be used when the feature is enabled. set_ambient_color Sets the ambient color value to be used when the ambient color override feature is enabled.\n1hook.set_ambient_color(r, g, b); Parameter Name Type Description r number The red color amount. (0 to 255) g number The green color amount. (0 to 255) b number The blue color amount. (0 to 255) Returns None. get_use_fillmode_override Returns the current state of the fillmode override feature.\n1boolean hook.get_use_fillmode_override(); Parameter Name Type Description None. Returns (boolean) The current state of the feature. set_use_fillmode_override Sets the fillmode override feature on or off.\n1hook.set_use_fillmode_override(flag); Parameter Name Type Description flag boolean Flag that states if the feature should be enabled or disabled. Returns None. get_use_fog_override Returns the current state of the fog override feature.\n1boolean hook.get_use_fog_override(); Parameter Name Type Description None. Returns (boolean) The current state of the feature. set_use_fog_override Sets the fog override feature on or off.\n1hook.set_use_fog_override(flag); Parameter Name Type Description flag boolean Flag that states if the feature should be enabled or disabled. Returns None. get_use_zbuffer_override Returns the current state of the zbuffer override feature.\n1boolean hook.get_use_zbuffer_override(); Parameter Name Type Description None. Returns (boolean) The current state of the feature. set_use_zbuffer_override Sets the zbuffer override feature on or off.\n1hook.set_use_zbuffer_override(flag); Parameter Name Type Description flag boolean Flag that states if the feature should be enabled or disabled. Returns None. Configuration Manager Functions exposed for this manager are accessed via the prefix: hook.cfg.\nload Loads a configuration file into the cache.\n1boolean hook.cfg.load(alias, file); Parameter Name Type Description alias string The configuration cache alias. file string The file path to the configurations. Returns (boolean) True on success, false otherwise. save Saves a configuration cache block to a file.\n1boolean hook.cfg.save(alias); 2boolean hook.cfg.save(alias, file); Parameter Name Type Description alias string The configuration cache alias. file string [Optional] The override file path to save the configurations to. Returns (boolean) True on success, false otherwise. remove Removes a configuration block from the cache.\n1hook.cfg.remove(alias); Parameter Name Type Description alias string The alias of the configuration cache to remove. Returns None. get_sections Returns the sections within a configuration block.\n1string|nil hook.cfg.get_sections(alias); Parameter Name Type Description alias string The configuration cache alias. Returns (string | nil) String containing the section names on success, nil otherwise. get_section_keys Returns the section keys within a configuration section.\n1string|nil hook.cfg.get_section_keys(alias, section); Parameter Name Type Description alias string The configuration cache alias. section string The configuration section name. Returns (string | nil) String containing the section keys on success, nil otherwise. get_string Returns a string value from a configuration.\n1string|nil hook.cfg.get_string(alias, section, key); Parameter Name Type Description alias string The configuration cache alias. section string The configuration section name. key string The configuration key. Returns (string) The configuration value on success, nil otherwise. set_value Sets a configuration value.\n1hook.cfg.set_value(alias, section, key, value); Parameter Name Type Description alias string The configuration cache alias. section string The configuration section name. key string The configuration key. value string The value to set. Returns None. get_values Returns a configuration files values.\n1table|nil hook.cfg.get_values(alias); Parameter Name Type Description alias string The configuration cache alias. Returns (table | nil) Table containing the entire configuration file information on success, nil otherwise. get_bool Returns a configuration value (bool)\n1boolean hook.cfg.get_bool(alias, section, key, default_value); Parameter Name Type Description alias string The configuration cache alias. section string The section that owns the desired value. key string The key of the value to obtain. default_value boolean The default value to use if the given key does not exist. Returns (boolean) The configuration value on success, default_value otherwise. get_uint8 Returns a configuration value (uint8)\n1number hook.cfg.get_uint8(alias, section, key, default_value); Parameter Name Type Description alias string The configuration cache alias. section string The section that owns the desired value. key string The key of the value to obtain. default_value number The default value to use if the given key does not exist. Returns (number) The configuration value on success, default_value otherwise. get_uint16 Returns a configuration value (uint16)\n1number hook.cfg.get_uint16(alias, section, key, default_value); Parameter Name Type Description alias string The configuration cache alias. section string The section that owns the desired value. key string The key of the value to obtain. default_value number The default value to use if the given key does not exist. Returns (number) The configuration value on success, default_value otherwise. get_uint32 Returns a configuration value (uint32)\n1number hook.cfg.get_uint32(alias, section, key, default_value); Parameter Name Type Description alias string The configuration cache alias. section string The section that owns the desired value. key string The key of the value to obtain. default_value number The default value to use if the given key does not exist. Returns (number) The configuration value on success, default_value otherwise. get_uint64 Returns a configuration value (uint64)\n1number hook.cfg.get_uint64(alias, section, key, default_value); Parameter Name Type Description alias string The configuration cache alias. section string The section that owns the desired value. key string The key of the value to obtain. default_value number The default value to use if the given key does not exist. Returns (number) The configuration value on success, default_value otherwise. get_int8 Returns a configuration value (int8)\n1number hook.cfg.get_int8(alias, section, key, default_value); Parameter Name Type Description alias string The configuration cache alias. section string The section that owns the desired value. key string The key of the value to obtain. default_value number The default value to use if the given key does not exist. Returns (number) The configuration value on success, default_value otherwise. get_int16 Returns a configuration value (int16)\n1number hook.cfg.get_int16(alias, section, key, default_value); Parameter Name Type Description alias string The configuration cache alias. section string The section that owns the desired value. key string The key of the value to obtain. default_value number The default value to use if the given key does not exist. Returns (number) The configuration value on success, default_value otherwise. get_int32 Returns a configuration value (int32)\n1number hook.cfg.get_int32(alias, section, key, default_value); Parameter Name Type Description alias string The configuration cache alias. section string The section that owns the desired value. key string The key of the value to obtain. default_value number The default value to use if the given key does not exist. Returns (number) The configuration value on success, default_value otherwise. get_int64 Returns a configuration value (int64)\n1number hook.cfg.get_int64(alias, section, key, default_value); Parameter Name Type Description alias string The configuration cache alias. section string The section that owns the desired value. key string The key of the value to obtain. default_value number The default value to use if the given key does not exist. Returns (number) The configuration value on success, default_value otherwise. get_float Returns a configuration value (float)\n1number hook.cfg.get_float(alias, section, key, default_value); Parameter Name Type Description alias string The configuration cache alias. section string The section that owns the desired value. key string The key of the value to obtain. default_value number The default value to use if the given key does not exist. Returns (number) The configuration value on success, default_value otherwise. get_double Returns a configuration value (double)\n1number hook.cfg.get_double(alias, section, key, default_value); Parameter Name Type Description alias string The configuration cache alias. section string The section that owns the desired value. key string The key of the value to obtain. default_value number The default value to use if the given key does not exist. Returns (number) The configuration value on success, default_value otherwise. Pointer Manager Functions exposed for this manager are accessed via the prefix: hook.pointers.\nload Loads a file that contains pointer related configurations into the pointer cache.\n1boolean hook.pointers.load(file); Parameter Name Type Description file string The file path to the configurations. Returns (boolean) True on success, false otherwise. add Adds a pointer to the pointer cache.\n1number hook.pointers.add(name, pointer); Parameter Name Type Description name string The name of the pointer. pointer number The existing pointer value. Returns (number) The pointer value passed in pointer. 1number hook.pointers.add(name, module_name, pattern, offset, count); Parameter Name Type Description name string The name of the pointer. module_name string The name of the module to scan for the pointer within. pattern string The pattern of data to scan for. offset number The offset to add to the address where the pattern was found. count number The count of the result to use if the pattern is found more than once. Returns (number) The pointer value passed in pointer. get Returns a pointer from the pointer cache.\n1number hook.pointers.get(name); Parameter Name Type Description name string The name of the pointer. Returns (number) The pointer value if valid, 0 otherwise. "},{"uri":"https://daochook.github.io/developers/namespaces/imgui/","title":"imgui","tags":[],"description":"","content":"The imgui namespace contains functions that are used to interact with the ImGui library. daochook offers a [nearly] full implementation of ImGui, adjusted to work nicer with Lua.\nDue to how many functions are within ImGui, this documentation may remain \u0026rsquo;lacking\u0026rsquo; for a bit of time. However, some bits of information will be explained to help understand the changes made to the functions in order to make use of them in your addons.\nFunctions exposed by this namespace are accessed via the prefix: gui.\ndaochook includes a helper lib for addons that should be used when your addon will make use of imgui.\nrequire 'imgui';\nWhen using the imgui addon lib, you can instead directly access the ImGui functions via the imgui. namespace.\ndaochook implements and makes use of ImGui v1.88. You can find info about it here:\nhttps://github.com/ocornut/imgui\nhttps://github.com/ocornut/imgui/tree/v1.88\nImGui Function Changes The following changes are made to all ImGui functions that are exposed.\nParameter Changes Any function that takes an ImVec2(..) parameter is instead, replaced with a table holding two numbers. Any function that takes an ImVec3(..) parameter is instead, replaced with a table holding three numbers. Any function that takes a bool* parameter is instead, replaced with a table holding a boolean property. Any function that accepts ... is not implemented, use the non-vararg variant of the function instead. Any function that accepts va_list is not implemented, use the non-vararg variant of the function instead. Return Changes Any function that returns ImVec2(..) will return two values instead. Any function that returns ImVec3(..) will return three values instead. Examples of Changes Some examples of these changes are as follows:\n1-- Original: 2-- ImVec2 GetCursorScreenPos(void); 3 4-- Changed: 5local x, y = imgui.GetCursorScreenPos(); 1-- Original: 2-- void PushStyleColor(ImGuiCol idx, const ImVec4\u0026amp; col); 3 4-- Changed: 5imgui.PushStyleColor(0, { 1.0, 1.0, 1.0, 1.0, }); 1-- Original: 2-- ImU32 GetColorU32(const ImVec4\u0026amp; col); 3 4-- Changed: 5local color = imgui.GetColorU32({ 1.0, 1.0, 1.0, 1.0, }); 1-- Original: 2-- bool Button(const char* label, const ImVec2\u0026amp; size = ImVec2(0, 0)); 3 4-- Changed: 5if (imgui.Button(\u0026#39;Derp\u0026#39;)) then print(\u0026#39;Derp clicked.\u0026#39;); end 6if (imgui.Button(\u0026#39;Derp\u0026#39;, { 25.0, 25.0, })) then print(\u0026#39;Derp clicked.\u0026#39;); end 1-- Original: 2-- bool Checkbox(const char* label, bool* v); 3 4-- Changed: 5local window = T{ 6 is_checked = T{ true, }, 7}; 8imgui.Checkbox(\u0026#39;Derp\u0026#39;, window.is_checked); "},{"uri":"https://daochook.github.io/","title":"Index","tags":[],"description":"","content":"\ndaochook Discord Chat GitHub Repo Bug Reports Documentation What is daochook? daochook is a free feature-rich third-party enhancement/modification for the MMORPG, Dark Age of Camelot.\n(See the features page for a full list of daochook\u0026rsquo;s features.)\nSupport My Work Want to say thanks for daochook? Feel free to donate or sponsor me on the following platforms.\nSponsor via GitHub Sponsor via Patreon Donate via PayPal daochook is released completely free of charge.\nDonations and sponsorships are completely optional and are a means to say thanks.\nHow does daochook work? daochook is an injected hook that is directly injected into the DAoC game client (game.dll) while launching the game.\nBecause of how daochook functions, it works entirely separate from the games files and DOES NOT require any additional client modifications! You do not need to modify any of your existing client files in order to use daochook making setup and usage a breeze.\nOnce injected into the game client, daochook then hooks itself onto several game functions allowing it to both take control of said functions, but also allow Lua addons to inject various things into the client as if it was done normally by the player.\nFor example, daochook hooks onto the games chat input where you would normally enter a command such as /wave to wave at someone. daochook intercepts all commands that run through the games command interpreter/handler and forwards them to its custom Lua addon engine. Addons can then decide if the command should be blocked from executing, allowing an addon to react to it first. This setup allows addons to implement and react to custom commands that are otherwise not built into the game client.\nAlong with this, by hooking the command handler function, Lua addons can also inject commands as if the player typed them, used a macro, or any other means of input the client would normally recognize.\nThis approach is applied for several major game functions allowing daochook to greatly enhance the features of the client.\n"},{"uri":"https://daochook.github.io/developers/libraries/","title":"Libraries","tags":[],"description":"","content":"Libraries (or libs) are scripts (or C DLLs) that contain additional functionality that all addons can make use of. Libraries are generally pre-packaged and found within the /addons/libs/ folder.\nAddon developers are free to make their own libraries. Libraries do not need to be placed in the libs folder in order to operate. If you have a library that you have made and feel would useful to all developers, feel free to contact daochook staff to see about having your library added to the main release package.\nLibraries are easy to use by any addon. Simply require them into your addon script(s). For example, most addons will want to make use of the common library. This lib will include a handful of common libraries for you. This can be included like:\n1require \u0026#39;common\u0026#39;; Libraries that are contained within subfolders can be included by passing the full path to the lib file, replacing any slash character in the path with a period instead. For example:\n1require \u0026#39;sugar.nil\u0026#39;; Compiled Libraries Compiled libraries, or clibs, are DLLs that expose functionality through a compiled C/C++ DLL file. Lua has a special setup to allow DLLs to be used as libraries when calling require. A compiled library must export a luaopen_ function that contains the name of the file as the require name that will be used. For example, if you have a clib named hello.dll then you would require it as:\n1require \u0026#39;hello\u0026#39;; Using this setup, hello.dll must export a function named luaopen_hello.\nThe library can also expose multiple luaopen_ functions that are used for specific namespace tables of functions. For example, the library may export multiple functions like this:\nluaopen_hello_earth luaopen_hello_world Then a script would require them as:\n1require \u0026#39;hello.earth\u0026#39;; 2require \u0026#39;hello.world\u0026#39;; For more information on compiled libraries, please check Lua\u0026rsquo;s documentation here: https://www.lua.org/pil/26.2.html\nIncluded Libraries daochook comes with the following included libraries:\nLibrary File Name Usage Description common.lua require 'common'; Library that includes the various other commonly used lib files. (It is recommended that your addon includes this!) daoc.lua local daoc = require 'daoc'; Library that adds game specific functions and information. (This library automatically detects your client version and includes the additional libs found within the /addons/libs/daoc/ folder.) imgui.lua require 'imgui'; Library that adds ImGui related functions and information. json.lua require 'json'; Library that adds JSON file reading/writing function support. mimie.lua require 'mimie'; Library used with LuaSocket; defines common web mime types and functionality. socket.lua require 'socket'; Library used to work with sockets and web requests. sugar.lua require 'sugar'; Library that greatly expands Lua\u0026rsquo;s base types to add a lot of functional programming features to Lua. switch.lua require 'switch'; Library that adds a switch-case helper function to Lua. win32types.lua require 'win32types'; Library that defines common Win32 types with FFI. daoc Library The daoc (Dark Age of Camelot) library is used to add game related functionality and information. The main library file will automatically determine your client version, then include the additional version-specific sub-library files found within the /addons/libs/daoc/ folder. These sub folders are separate into client versions to ensure that the functionality will work on as many clients as possible. It\u0026rsquo;s also easy to add support for other client versions by simply making a copy of an existing folder and updating the function information and pointers appropriately.\nThis library contains helper functions for interacting with various parts of the game client and its memory/information as well as wrappers to directly call game functions via LuaJIT\u0026rsquo;s FFI library.\nsugar Library The sugar library is a lib made by atom0s that adds a ton of functional programming helper extensions to the various core objects of Lua.\nSugar includes new functions for the following types and tables:\nboolean function math number nil string table Note: While sugar does offer a lot of functionality for Lua tables, it is not enabled by default for all table objects. Instead, you will either need to convert your table to a metatable-enabled one, or create it as one. You can do that easily by using the following syntax instead when creating tables:\n1-- Normal table.. 2local t = { }; 3 4-- Sugar enhanced table.. 5local t = T{ }; When you create a sugar enhanced table, this enables all of sugar\u0026rsquo;s features that are extending the metatable of the table object.\nHere is an example:\n1-- Normal Lua table usage example.. 2local t = { }; 3table.insert(t, 2); 4table.insert(t, 3); 5table.insert(t, 1); 6table.sort(t); 7 8for k, v in pairs (t) do print(v); end 9 10-- Sugar enhanced table usage example.. 11local t = T{ }; 12t:insert(2); 13t:insert(3); 14t:insert(1); 15t:sort(); 16t:each(function (v) print(v); end); Sugar is very powerful in how much it can allow you to transform normal Lua code into a functional programming syntax.\n"},{"uri":"https://daochook.github.io/developers/namespaces/memory/","title":"memory","tags":[],"description":"","content":"The memory namespace contains functions that allow addons to access the game client memory in multiple ways.\nYou can also make use of the ffi library to access memory with more features such as casting to actual C style structures.\nFunctions exposed by this namespace are accessed via the prefix: hook.memory.\nFunctions get_base Returns the base address of a loaded module.\n1number hook.memory.get_base(name); Parameter Name Type Description name string [Optional] The name of the module. Returns (number) The base address of of the module on success, 0 otherwise. If name is nil or an empty string, then the game.dll module is used by default.\nget_size Returns the size of a loaded module.\n1number hook.memory.get_size(name); Parameter Name Type Description name string [Optional] The name of the module. Returns (number) The size of of the module on success, 0 otherwise. If name is nil or an empty string, then the game.dll module is used by default.\nprotect 1boolean, number hook.memory.protect(addr, size, protection); Sets the memory protection of the given address.\nParameter Name Type Description addr number The address to change the protection of. size number The size of the region to change. protection number The new protection value to change to. Returns (boolean, number) The return value from VirtualProtect and the previous protection value. unprotect 1boolean, number hook.memory.unprotect(addr, size); Sets the memory protection of the given address to PAGE_EXECUTE_READWRITE.\nParameter Name Type Description addr number The address to change the protection of. size number The size of the region to change. Returns (boolean, number) The return value from VirtualProtect and the previous protection value. alloc Allocates memory within the process and returns the address to where it was allocated at. (Uses VirtualAlloc to allocate memory.)\n1number|nil hook.memory.alloc(size); Parameter Name Type Description size number The size of the region to allocate. Returns (number | nil) The address of the allocated memory on success, nil otherwise. dealloc Deallocates memory that was previously allocated via alloc.\n1boolean hook.memory.dealloc(addr); Parameter Name Type Description addr number The address of the memory to deallocate. Returns (boolean) The return value from VirtualFree. find Scans for a pattern of bytes within the given module.\n1number hook.memory.find(name, pattern, offset, count); Parameter Name Type Description name string [Optional] The name of the module to scan within. pattern string The pattern to scan for. offset number The offset from the found address to be added to the return. count number The count of the result to use if the pattern is found more than once. Returns (number) The address where the pattern was found on success, 0 otherwise. If name is nil or an empty string, then the game.dll module is used by default.\n1number hook.memory.find(base, size, pattern, offset, count); Parameter Name Type Description base number The address to start scanning at. size number The size to scan within. pattern string The pattern to scan for. offset number The offset from the found address to be added to the return. count number The count of the result to use if the pattern is found more than once. Returns (number) The address where the pattern was found on success, 0 otherwise. If base and size are both 0, then the game.dll module is used by default.\nread_int8 Reads a value from memory. (int8)\n1number hook.memory.read_int8(addr); Parameter Name Type Description addr number The address to read the value from. Returns (number) The read value on success, 0 otherwise. read_int16 Reads a value from memory. (int16)\n1number hook.memory.read_int16(addr); Parameter Name Type Description addr number The address to read the value from. Returns (number) The read value on success, 0 otherwise. read_int32 Reads a value from memory. (int32)\n1number hook.memory.read_int32(addr); Parameter Name Type Description addr number The address to read the value from. Returns (number) The read value on success, 0 otherwise. read_int64 Reads a value from memory. (int64)\n1number hook.memory.read_int64(addr); Parameter Name Type Description addr number The address to read the value from. Returns (number) The read value on success, 0 otherwise. read_uint8 Reads a value from memory. (uint8)\n1number hook.memory.read_uint8(addr); Parameter Name Type Description addr number The address to read the value from. Returns (number) The read value on success, 0 otherwise. read_uint16 Reads a value from memory. (uint16)\n1number hook.memory.read_uint16(addr); Parameter Name Type Description addr number The address to read the value from. Returns (number) The read value on success, 0 otherwise. read_uint32 Reads a value from memory. (uint32)\n1number hook.memory.read_uint32(addr); Parameter Name Type Description addr number The address to read the value from. Returns (number) The read value on success, 0 otherwise. read_uint64 Reads a value from memory. (uint64)\n1number hook.memory.read_uint64(addr); Parameter Name Type Description addr number The address to read the value from. Returns (number) The read value on success, 0 otherwise. read_float Reads a value from memory. (float)\n1number hook.memory.read_float(addr); Parameter Name Type Description addr number The address to read the value from. Returns (number) The read value on success, 0 otherwise. read_double Reads a value from memory. (double)\n1number hook.memory.read_double(addr); Parameter Name Type Description addr number The address to read the value from. Returns (number) The read value on success, 0 otherwise. read_array Reads an array of bytes from memory.\n1table|nil hook.memory.read_array(addr, size); Parameter Name Type Description addr number The address to read the value from. size number The size of data to read. Returns (table | nil) The read array on success, nil otherwise. read_string Reads a string from memory.\n1string|nil hook.memory.read_string(addr, size); Parameter Name Type Description addr number The address to read the value from. size number The size of data to read. Returns (string | nil) The read string on success, nil otherwise. read_literal Reads a string literal from memory.\n1string|nil hook.memory.read_literal(addr, size); Parameter Name Type Description addr number The address to read the value from. size number The size of data to read. Returns (string | nil) The read string literal on success, nil otherwise. write_int8 Writes a value to memory. (int8)\n1hook.memory.write_int8(addr, value); Parameter Name Type Description addr number The address to write the value to. value number The value to write. Returns None. write_int16 Writes a value to memory. (int16)\n1hook.memory.write_int16(addr, value); Parameter Name Type Description addr number The address to write the value to. value number The value to write. Returns None. write_int32 Writes a value to memory. (int32)\n1hook.memory.write_int32(addr, value); Parameter Name Type Description addr number The address to write the value to. value number The value to write. Returns None. write_int64 Writes a value to memory. (int64)\n1hook.memory.write_int64(addr, value); Parameter Name Type Description addr number The address to write the value to. value number The value to write. Returns None. write_uint8 Writes a value to memory. (uint8)\n1hook.memory.write_uint8(addr, value); Parameter Name Type Description addr number The address to write the value to. value number The value to write. Returns None. write_uint16 Writes a value to memory. (uint16)\n1hook.memory.write_uint16(addr, value); Parameter Name Type Description addr number The address to write the value to. value number The value to write. Returns None. write_uint32 Writes a value to memory. (uint32)\n1hook.memory.write_uint32(addr, value); Parameter Name Type Description addr number The address to write the value to. value number The value to write. Returns None. write_uint64 Writes a value to memory. (uint64)\n1hook.memory.write_uint64(addr, value); Parameter Name Type Description addr number The address to write the value to. value number The value to write. Returns None. write_float Writes a value to memory. (float)\n1hook.memory.write_float(addr, value); Parameter Name Type Description addr number The address to write the value to. value number The value to write. Returns None. write_double Writes a value to memory. (double)\n1hook.memory.write_double(addr, value); Parameter Name Type Description addr number The address to write the value to. value number The value to write. Returns None. write_array Writes an array of values to memory.\n1hook.memory.write_array(addr, value); Parameter Name Type Description addr number The address to write the value to. value table The array of values to write. Returns None. write_string Writes a string to memory.\n1hook.memory.write_string(addr, str, size); Parameter Name Type Description addr number The address to write the value to. str string The string value to write. size number [Optional] The length of the string to write. Returns None. If size is not given, then the length of the string is automatically determined.\n"},{"uri":"https://daochook.github.io/developers/namespaces/misc/","title":"misc","tags":[],"description":"","content":"The misc namespace contains functions that don\u0026rsquo;t fit into their own namespace (either due to what they are for, or not having enough functions of the same type) that help with various things.\nFunctions exposed by this namespace are accessed via the prefix: hook.misc.\nFunctions get_clipboard Returns the current string in the clipboard.\n1string|nil hook.misc.get_clipboard(); Parameter Name Type Description None. Returns (string | nil) The clipboard string on success, nil otherwise. set_clipboard Sets the clipboard to the given string.\n1boolean hook.misc.set_clipboard(str); Parameter Name Type Description str string The string to set the clipboard to. Returns (boolean) True on success, false otherwise. hide_console Hides the debug console window.\n1hook.misc.hide_console(); Parameter Name Type Description None. Returns None. show_console Shows the debug console window.\n1hook.misc.show_console(); Parameter Name Type Description None. Returns None. execute Executes a program on the local machine.\n1hook.misc.execute(path, args, mode); Parameter Name Type Description path string The path to the progam to execute. args string The arguments to pass to the program. mode number [Optional] The show command mode to execute the program with. Returns None. open_url Opens a url within the local machines default browser.\n1hook.misc.open_url(url); Parameter Name Type Description url string The website url to open. Returns None. play_sound Plays a sound file. (Plays async via PlaySoundA)\n1hook.misc.play_sound(path); Parameter Name Type Description path string The path to the sound file to play. Returns None. If path is an empty string, then any previous playing sound will be stopped.\n"},{"uri":"https://daochook.github.io/developers/namespaces/regex/","title":"regex","tags":[],"description":"","content":"The regex namespace contains functions that allow for more advanced regular expression usage.\nThese file system functions make use of the C++ std::regex header. The functions are named the same/similar.\nFor more information on those functions, please visit: https://en.cppreference.com/w/cpp/regex\nFunctions exposed by this namespace are accessed via the prefix: hook.regex.\nFunctions match Returns any matches to the given pattern on the given string. (Uses std::regex_match)\n1table|nil hook.regex.match(message, pattern, flags); Parameter Name Type Description message string The message to match the pattern within. pattern string The pattern to match. flags number [Optional] The regex flags to use while matching. Returns (table | nil) Table containing the matches on success, nil otherwise. search Returns any matches to the given pattern on the given string. (Uses std::regex_search)\n1table|nil hook.regex.search(message, pattern, flags); Parameter Name Type Description message string The message to match the pattern within. pattern string The pattern to match. flags number [Optional] The regex flags to use while matching. Returns (table | nil) Table containing the matches on success, nil otherwise. replace Returns a replaced string using the given pattern to make replacements. (Uses std::regex_replace)\n1string|nil hook.regex.replace(message, pattern, replace, flags); Parameter Name Type Description message string The message to replace the pattern within. pattern string The pattern to match. replace string The replacement string. flags number [Optional] The regex flags to use while matching. Returns (string | nil) The replaced string on success, nil otherwise. 1string|nil hook.regex.replace(message, pattern, replace, flags); Parameter Name Type Description message string The message to replace the pattern within. pattern string The pattern to match. replace function The replacement function to invoke when a match is found to be replaced. flags number [Optional] The regex flags to use while matching. Returns (string | nil) The replaced string on success, nil otherwise. split Returns a table containing the parts of a split string. (Uses std::sregex_token_iterator)\n1table|nil hook.regex.split(message, pattern, flags); Parameter Name Type Description message string The message to split. pattern string The pattern to match. flags number [Optional] The regex flags to use while matching. Returns (table | nil) Table containing the split parts on success, nil otherwise. "},{"uri":"https://daochook.github.io/tags/","title":"Tags","tags":[],"description":"","content":""},{"uri":"https://daochook.github.io/developers/namespaces/tasks/","title":"tasks","tags":[],"description":"","content":"The tasks namespace contains functions used to run concurrent functions (coroutines). These functions operate similar to Lua\u0026rsquo;s built in coroutines but offer a bit more flexibility on how they work. daochook also extends the built-in coroutine table to include additional functions.\nFunctions exposed by this namespace are accessed via the prefix: hook.tasks.\nFunctions once Executes a task once.\n1hook.tasks.once(func); Parameter Name Type Description func function The function to execute. Returns None. Executes a task once, after the given delay.\n1hook.tasks.once(delay, func); Parameter Name Type Description delay number The delay to wait before executing the task. func function The function to execute. Returns None. oncef Executes a task once, after the given delay (in frames).\n1hook.tasks.once(delay, func); Parameter Name Type Description delay number The delay to wait before executing the task. (in frames) func function The function to execute. Returns None. loop Loops a task.\n1hook.tasks.loop(delay, repeats, repeat_delay, func); Parameter Name Type Description delay number The delay to wait before executing the task. repeats number The number of times to execute the task. repeat_delay number The delay to wait between task executions. func function The function to execute. Returns None. loopf Loops a task.\n1hook.tasks.loopf(delay, repeats, repeat_delay, func); Parameter Name Type Description delay number The frame delay to wait before executing the task. repeats number The number of times to execute the task. repeat_delay number The frame delay to wait between task executions. func function The function to execute. Returns None. coroutine Extensions You can see the extensions to the coroutine object on the extensions documentation page.\n"},{"uri":"https://daochook.github.io/developers/namespaces/time/","title":"time","tags":[],"description":"","content":"The time namespace contains functions that offer more precise timing related information. Lua only offers two time related methods by default which don\u0026rsquo;t offer much in regards to precision timing, or other useful time related info.\nFunctions exposed by this namespace are accessed via the prefix: hook.time.\nFunctions clock Returns the current high-resolution clock information. (Uses std::chrono::high_resolution_clock::now)\n1table hook.time.clock(); Parameter Name Type Description None. Returns (table) Table containing the high-resolution clock information. The returned table contains the following properties:\ns (number) - The number of seconds of the high-res clock. ms (number) - The number of milli-seconds of the high-res clock. micro (number) - The number of micro-seconds of the high-res clock. nano (number) - The number of nano-seconds of the high-res clock. query_performance_counter, qpc Returns a table containing the current performance counter information. (Uses QueryPerformanceCounter)\n1table hook.time.query_performance_counter(); 2table hook.time.qpc(); Parameter Name Type Description None. Returns (table) Table containing the current performance counter information. The returned table contains the following properties:\nquad_part (number) - The performance counter quad part. high_part (number) - The performance counter high part. low_part (number) - The performance counter low part. q (number) - The performance counter quad part. (Shorthand naming.) h (number) - The performance counter high part. (Shorthand naming.) l (number) - The performance counter low part. (Shorthand naming.) query_performance_frequency, qpf Returns a table containing the current performance frequency information. (Uses QueryPerformanceFrequency)\n1table hook.time.query_performance_frequency(); 2table hook.time.qpf(); Parameter Name Type Description None. Returns (table) Table containing the current performance frequency information. The returned table contains the following properties:\nquad_part (number) - The performance frequency quad part. high_part (number) - The performance frequency high part. low_part (number) - The performance frequency low part. q (number) - The performance frequency quad part. (Shorthand naming.) h (number) - The performance frequency high part. (Shorthand naming.) l (number) - The performance frequency low part. (Shorthand naming.) get_local_time, glt Returns a table containing the current local time. (Uses GetLocalTime)\n1table hook.time.get_local_time(); 2table hook.time.glt(); Parameter Name Type Description None. Returns (table) Table containing the current local time information. The returned table contains the following properties:\nyear (number) - The local time year value. month (number) - The local time month value. dayofweek (number) - The local time day of week value. day (number) - The local time day value. hour (number) - The local time hour value. minute (number) - The local time minute value. second (number) - The local time second value. ms (number) - The local time millisecond value. y (number) - The local time year value. m (number) - The local time month value. wd (number) - The local time day of week value. d (number) - The local time day value. hh (number) - The local time hour value. mm (number) - The local time minute value. ss (number) - The local time second value. get_system_time, gst Returns a table containing the current system time. (Uses GetSystemTime)\n1table hook.time.get_system_time(); 2table hook.time.gst(); Parameter Name Type Description None. Returns (table) Table containing the current system time information. The returned table contains the following properties:\nyear (number) - The system time year value. month (number) - The system time month value. dayofweek (number) - The system time day of week value. day (number) - The system time day value. hour (number) - The system time hour value. minute (number) - The system time minute value. second (number) - The system time second value. ms (number) - The system time millisecond value. y (number) - The system time year value. m (number) - The system time month value. wd (number) - The system time day of week value. d (number) - The system time day value. hh (number) - The system time hour value. mm (number) - The system time minute value. ss (number) - The system time second value. get_tick, tick Returns the current system tick count. (Uses GetTickCount)\n1table hook.time.get_tick(); 2table hook.time.tick(); Parameter Name Type Description None. Returns (number) The current system tick count. get_tick64, tick64 Returns the current system tick count. (Uses GitTickCount64)\n1table hook.time.get_tick64(); 2table hook.time.tick64(); Parameter Name Type Description None. Returns (number) The current system tick count. "}]