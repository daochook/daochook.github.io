[{"uri":"https://daochook.github.io/usage/configurations/","title":"Configuring daochook","tags":[],"description":"","content":"Once daochook is fully and properly installed, you are ready to begin configurations.\nBoot Configuration File Format The boot configuration file holds all of the information needed to launch the game client with daochook injected. It also includes some additional configurations used with daochook internally, such as if you wish to enable/disable certain included patches. Please read the following information carefully to ensure your boot configuration file is written correctly.\nSection: [import] (optional) import (string) - The name of another boot configuration file to import. Merges the two files settings\u0026rsquo; together to form a single file. The import section is an optional feature that allows advanced users to create base configuration files that can be used by multiple boot configurations. You can create a single base file that defines the daochook.game, daochook.server and daochook.patches sections then include that into each configuration that will use the same base information. Then your actual boot configuration file only needs to implement the daochook.auth for each character instead.\nSection: [daochook.game] path (string) - The full path to your Dark Age of Camelot installation game.dll file that you wish to launch with daochook. Section: [daochook.server] addr (string) - The server IP address (or DNS name) that you wish to connect to. port (number) - The server port that you wish to connect to. id (number) - The server id that you wish to connect to. (Set to 42 if playing on a private server unless otherwise noted.) Section: [daochook.auth] username (string) - The username of the account you wish to login into. password (string) - The password of the account you wish to login into. character (string, optional) - The name of the character you wish to auto-log into. realm (string, optional) - The realm id of the character you wish to auto-log into. (0 = Albion, 1 = Hibernia, 2 = Midgard) Section: [daochook.patches] disable_encryption (boolean) - Patch that will remove the packet encryption if enabled. disable_multi_instance_check (boolean) - Patch that will remove the multi-client instance check if enabled. Example Boot Configuration File Here is a full example configuration file:\n\u0026lt;Path To daochook\u0026gt;\\boot\\config\\atom0s.ini:\n[daochook.game] path= Z:\\Games\\Electronic Arts\\Dark Age of Camelot\\game.dll [daochook.server] addr= 192.168.1.100 port= 10300 id= 42 [daochook.auth] username= atom0s password= password character= Atomos realm= 2 [daochook.patches] disable_encryption = 1 disable_multi_instance_check = 1 Import Usage Example As mentioned above, advanced users can make use of the import section of the configuration file to include a base configuration file that holds information that would otherwise be duplicated across multiple files. Here is quick exmaple of using the import section for two characters that would connect to the same server.\n\u0026lt;Path To daochook\u0026gt;\\boot\\config\\my_server.ini:\n[daochook.game] path= Z:\\Games\\Electronic Arts\\Dark Age of Camelot\\game.dll [daochook.server] addr= 192.168.1.100 port= 10300 id= 42 [daochook.patches] disable_encryption = 1 disable_multi_instance_check = 1 \u0026lt;Path To daochook\u0026gt;\\boot\\config\\atom0s1.ini:\n[import] import=my_server.ini [daochook.auth] username= atom0s1 password= password character= Atomosone realm= 2 \u0026lt;Path To daochook\u0026gt;\\boot\\config\\atom0s2.ini:\n[import] import=my_server.ini [daochook.auth] username= atom0s2 password= password character= Atomostwo realm= 2 "},{"uri":"https://daochook.github.io/installation/system_requirements/","title":"System Requirements","tags":[],"description":"","content":"daochook Requirements daochook specifically requires the following in order to function:\nMicrosoft Visual C++ Redist. 2022 - https://aka.ms/vs/17/release/vc_redist.x86.exe Latest Client Requirements Before attempting to use daochook, you should make sure that your system meets the minimum requirements for the official Dark Age of Camelot game client.\nMinimum Recommended Pentium 4 2.0 GHz or equivalent Pentium 4 3.0 GHz or equivalent 512 MB RAM 1 GB RAM 3.5 GB free hard drive space 3.5 GB free hard drive space Compatible 3D acceleration card w/ 64 MB VRAM 256 MB ATI X800 or Nvidia GeForce 6800 series or higher Directx 9.0c or later Direct X 9.0c or later Shader 1.1 or higher Shader 2.X or greater support Internet Connection Required Internet Connection Required There are no additional system requirements in regards to hardware needed for daochook to operate. If you meet the client requirements, you are fine.\n"},{"uri":"https://daochook.github.io/installation/install_git/","title":"Install via Git (Recommended)","tags":[],"description":"","content":" If you are unsure of using Git or do not wish to use it, then you can instead follow the instructions for downloading the latest release package manually as a .zip file. See Install via Zip instead.\nCurrently, the best, and recommended, way to install daochook is by using Git. You can either use Git via the command line or install your personal favorite Git client or shell integration. There is no \u0026lsquo;best\u0026rsquo; client or means of using Git, that is entirely personal choice on which you prefer to use.\nSome recommended free solutions are:\nGit For Windows (Direct Git command line access.) - https://git-scm.com/download/win TortoiseGit (Windows shell integration.) - https://tortoisegit.org/ GitHub Desktop (Git GUI client.) - https://desktop.github.com/ Sourcetree (Git GUI client.) - https://www.sourcetreeapp.com/ By using Git, it is much easier to keep daochook up to date. You can simply pull the latest changes after you\u0026rsquo;ve initially cloned the release repository.\nPicking An Installation Folder When picking a folder to install daochook to, it is important that you are NOT breaking the following guidelines.\ndaochook should NOT be installed into a system protected folder.\nThis means it should not be put into folders (or folders within) such as:\nC:\\Program Files (x86)\\, C:\\Program Files\\, C:\\Windows\\\ndaochook should NOT be installed into the game client folder!\nYou should never install daochook into the game client folder for safety reasons.\nIt should be in its own separate folder entirely!\nA recommended and safe installation location would be something such as:\nC:\\daochook\\ C:\\Users\\Your_Username_Here\\Desktop\\daochook\\ Z:\\Some\\Other\\Folder\\daochook\\ Cloning The Release Repository Please note, because there are so many different Git clients available, it is not possible for us to write a full guide for each one. Instead, this guide will demonstrate how to install using two preselected UI clients and with Git via the command line. The two clients that this guide will use are GitHub Desktop and TortoiseGit.\nInstalling via GitHub Desktop First, download and install the GitHub Desktop client. Once installed, launch it and either sign in with your existing GitHub account, or skip the sign in step. (Note: You do not need to sign in to clone the daochook repository, so you can skip the sign in step if you do not want to or do not wish to create an account with GitHub.) From the top menu, click File then Clone Repository... In the clone window, click the URL tab at the top, then enter the repository URL: https://github.com/daochook/daochook.git For the local path, ensure you follow the guidelines above and place daochook into a valid path. For example, C:\\daochook Click Clone. If everything was successful, you\u0026rsquo;re done and should have daochook now installed to the selected folder!\nInstalling via TortoiseGit First, download and install Git for Windows and TortoiseGit. Follow the various prompts to fully install both tools. Restart your computer. (This is recommended as TortoiseGit is a shell extension.) Navigate to the parent folder where you plan to install daochook to. For example: C:\\ Right-click within the parent folder and choose Git Clone.. (Be sure you are not right-clicking on a folder!) In the clone window, enter the repository URL: https://github.com/daochook/daochook.git For the Directory ensure the path is correct and that it has automatically added \\daochook to your parent folder. Click OK to clone. If everything was successful, a second window should show with some information about the clone and that it was successful. If so, then you\u0026rsquo;re done and should have daochook now installed to the selected folder!\nInstalling via Git Command Line First, download and install Git for Windows. Follow the various prompts to fully install. Open a new command prompt window. (cmd, powershell, Windows terminal, bash, etc. are all suitable for this.) Navigate the command prompt to the parent folder you wish to install daochook to. For example: cd C:\\ Enter the following command: git clone https://github.com/daochook/daochook.git If everything was successful, you\u0026rsquo;re done and should have daochook now installed to the selected folder!\n"},{"uri":"https://daochook.github.io/usage/running/","title":"Running daochook","tags":[],"description":"","content":"Launching daochook daochook expects a boot configuration file to be passed to its launcher when running, such as:\ndaochook.exe atom0s.ini When the launcher starts, it will take the given file name and locate it within the boot configuration directory automatically.\nThe path to the daochook boot configuration directory is: \u0026lt;Path To daochook\u0026gt;\\config\\boot\\\nBe sure to read the configurations documentation page for more information on how to configure daochook.\n"},{"uri":"https://daochook.github.io/usage/commands/","title":"In-Game Commands","tags":[],"description":"","content":"daochook includes several custom commands that are built-in, which you can access by typing into the game chat like a normal slash command.\nCommands follow the below syntax for arguments:\nSyntax Meaning arg The argument is required and should be entered exactly how it\u0026rsquo;s displayed. \u0026lt;arg\u0026gt; The argument is required, a value should be given. \u0026lt;arg...\u0026gt; The argument is required, one or more values should be given. (arg|arg) The argument is required, one of the displayed values should be given. [arg] The argument is optional, a value is not required. [arg...] The argument is optional, one or more values are allowed. Command: /addon /addon load \u0026lt;name\u0026gt; Loads the an addon by its name. /addon unload \u0026lt;name\u0026gt; Unloads an addon by its name. /addon unloadall Unloads all currently loaded addons. /addon kill \u0026lt;name\u0026gt; Kills an addon by its name. (Forces it to stop and unload.) /addon reload \u0026lt;name\u0026gt; Reloads an addon by its name. /addon exec \u0026lt;name\u0026gt; \u0026lt;lua_string\u0026gt; Executes a string of Lua code within the given addons Lua state. /addon list Lists the currently loaded addons. /addon info \u0026lt;name\u0026gt; Displays information about the given addon. /addon link \u0026lt;name\u0026gt; Opens the given addons homepage url in the systems default browser. Command: /ambient /ambient Toggles the ambient lighting feature on or off. /ambient \u0026lt;0 | 1\u0026gt; Sets the ambient lighting feature on or off. /ambient \u0026lt;r\u0026gt; \u0026lt;g\u0026gt; \u0026lt;b\u0026gt; Sets the ambient lighting color. Command: /fillmode /fillmode Toggles the fill mode feature on or off. This feature toggles wireframe rendering on or off.\nCommand: /fog /fog Toggles overriding the games fog on and off. This feature, when enabled, will disable the game from rendering fog.\nCommand: /zbuffer /zbuffer Toggles overriding the games zbuffer on and off. This feature, when enabled, will disable the games z-buffer rendering state.\n"},{"uri":"https://daochook.github.io/installation/install_zip/","title":"Install via Zip","tags":[],"description":"","content":" It is recommended that you install daochook via a Git client for easy updates. See Install via Git if you are comfortable doing so.\nPicking An Installation Folder When picking a folder to install daochook to, it is important that you are NOT breaking the following guidelines.\ndaochook should NOT be installed into a system protected folder.\nThis means it should not be put into folders (or folders within) such as:\nC:\\Program Files (x86)\\, C:\\Program Files\\, C:\\Windows\\\ndaochook should NOT be installed into the game client folder!\nYou should never install daochook into the game client folder for safety reasons.\nIt should be in its own separate folder entirely!\nA recommended and safe installation location would be something such as:\nC:\\daochook\\ C:\\Users\\Your_Username_Here\\Desktop\\daochook\\ Z:\\Some\\Other\\Folder\\daochook\\ Downloading and Installing You can download the latest package of daochook here: https://github.com/daochook/daochook/archive/refs/heads/main.zip\nOnce downloaded, navigate to the parent folder you wish to install daochook to and extract the zip contents there.\nFor example: C:\\daochook\\\n"},{"uri":"https://daochook.github.io/features/","title":"Features","tags":[],"description":"","content":"Because daochook is injected into the game client, it can hook onto the game in various ways. This allows for many features that are not generally possible with just external tools alone. Check out the various features of daochook below for more information.\nCustom Launcher (Injector) daochook ships with its own basic command line injector/launcher. This is to ensure that daochook is injected properly and as soon as possible in the launching of the game client. (Other injectors are supported as long as they are able to call exported functions.)\nClick to read more... The included injector also allows for quick login access using any version of the client that supports it.\n// General Usage daochook.exe [configname.ini] Injected Hook As previously mentioned, daochook is injected directly into the game client (game.dll). This gives the project an advantage over other external third-party tools as it can directly access the games data, memory and functions.\ndaochook also hooks onto the games Direct3D device to allow for custom rendering and additional rendering related features. (See below for more info.)\nHooked Game Functions daochook takes advantage of being injected by hooking onto several major game functions including:\n(Chat) Command Handler - The game function responsible for handling all command input within the client. (Typed, macros, built-in system, menus, etc.) (Chat) Message Handler - The game function responsible for outputting messages to the chat/combat log window(s). (Packets) Incoming Packet Handler - The game function responsible for handling incoming packets from the server. (Packets) Outgoing Packet Handler - The game function responsible for handling outgoing packets from the client. By hooking onto these functions, daochook is able to do multiple things including:\nRead: See any time the function(s) are called and log/view the parameters they were called with. Block: Prevent the game client from ever seeing the call was made. Modify: Alter the parameters to change how the call will actually be invoked by the game client. Inject: Manually invoke the original function to easily inject custom data. Click to read more... For example, let\u0026rsquo;s look closer at the (Chat) Command Handler function. This function is responsible for handling all command input within the client. This function is called whenever the user types something into chat, uses a slash command (ie. /wave), presses a macro, clicks a button that will cause a command to be parsed/interpreted, etc.\nThe function looks like this:\nvoid handle_cmd(const char* command, int32_t mode) { // ... } The game client also has a secondary input mode pointer that is used with command input that is not passed as a normal argument, it is instead a global variable.\nAny time a command is to be handled by the client it will pass through this function. Once hooked, daochook has the ability to fully take control of the function call. Each time the function is called, daochook will first attempt to \u0026lsquo;handle\u0026rsquo; it. This means that the command will go through a \u0026lsquo;process\u0026rsquo; chain to see if anything can make use of it before it eventually gets sent to the client to be handled as normal.\nThe order in which things happen looks like this:\nGame calls original command handler function. daochook intercepts the call, forwards it to its own internal handler. daochook checks for any built-in commands it will handle first. (ie. /addon) If daochook handles the command, it is blocked from being seen by the client. If daochook does not handle the command, the chain continues. daochook forwards the command to its internal addon manager. The addon manager sends the command to all loaded addons that have a valid command event handler registered. If an addon handles the command, it is blocked from being seen by the client. If no addon handles the command, the chain continues. If nothing has handled the command, it is sent to the client as normal. During this chain, both daochook and/or an addon have the chance to alter any of the parameters of the original call. For example, if the command being handled is /wave and instead you want to do /shrug, you can easily do this with an addon.\nThis can also be used to modify incoming and outgoing packets, or out-right block packets from being sent or received!\nDirect3D Hook Along with hooking various game functions, daochook also hooks onto the games Direct3D device. This allows the hook to render its own things into the game scene, either in 2D or 3D. The main purpose for this however, is to allow the use of ImGui to render custom in-game UI elements from addons.\nCustom UI via ImGui daochook implements and [fully] exposes ImGui to Lua for addons to make use of. You can easily create your own custom UI elements that can interact with the game directly, display useful / important game information, and much much more!\nYou can find more information about ImGui here: https://github.com/ocornut/imgui\nAddons, Powered By Lua! daochook includes a powerful custom addon system, backed by Lua. (LuaJIT to be more specific, via MoonJIT)\nAddons are sandboxed/isolated Lua scripts that can be used to greatly enhance the game play experience of the game. Addons can do a wide varity of things and are able to directly communicate with the game client in multiple ways.\nYou can access all of the hooked functions directly to allow your addon to easily inject commands, chat messages, packets and more.\nAddons also have full access to ImGui, allowing you to create your own feature-rich UI\u0026rsquo;s.\nWith the use of LuaJIT, addons also have access to C style structure definitions, casting, and function calling, allowing addons to even further extend their usefulness by directly interacting with game data and functions.\nFor example, here is a simple addon that will handle the command /derp. Anytime this command is used, it will instead use /wave.\naddon.name = \u0026#39;example\u0026#39;; addon.author = \u0026#39;atom0s\u0026#39;; addon.desc = \u0026#39;A simple example addon.\u0026#39;; addon.link = \u0026#39;https://atom0s.com\u0026#39;; addon.version = \u0026#39;1.0\u0026#39;; require \u0026#39;common\u0026#39;; require \u0026#39;daoc\u0026#39;; hook.events.register(\u0026#39;command\u0026#39;, \u0026#39;command_cb\u0026#39;, function (e) -- Parse the command into arguments.. local args = e.modified_command:args(); -- Command: /derp if (#args \u0026gt;= 1 and (args[1]:ieq(\u0026#39;derp\u0026#39;) and e.imode == daoc.chat.input_mode.slash) or args[1]:ieq(\u0026#39;/derp\u0026#39;)) then -- Mark the command as handled, prevents the game from seeing it.. e.blocked = true; -- Inject a new command into the handler.. daoc.chat.exec(daoc.chat.command_mode.typed, daoc.chat.input_mode.normal, \u0026#39;/wave\u0026#39;); return; end end); For full information on addons, please check the developer documentation section of this site!\n"},{"uri":"https://daochook.github.io/installation/","title":"Download &amp; Install","tags":[],"description":"","content":"daochook is designed to be self-contained and easy to install (and uninstall).\nBefore installing daochook, be sure that your system meets the minimum requirements and that you have all system requirements for the project installed.\nYou can find a full list of requirements here: Click Here\n"},{"uri":"https://daochook.github.io/usage/","title":"Usage","tags":[],"description":"","content":"This section covers the various methods of using daochook including configurations, in-game commands and more.\n"},{"uri":"https://daochook.github.io/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://daochook.github.io/","title":"Index","tags":[],"description":"","content":"\ndaochook What is daochook? daochook is a free feature-rich third-party enhancement/modification for the MMORPG, Dark Age of Camelot.\n(See the features page for a full list of daochook\u0026rsquo;s features.)\nHow does daochook work? daochook is an injected hook that is directly injected into the DAoC game client (game.dll) while launching the game.\nBecause of how daochook functions, it works entirely separate from the games files and DOES NOT require any additional client modifications! You do not need to modify any of your existing client files in order to use daochook making setup and usage a breeze.\nOnce injected into the game client, daochook then hooks itself onto several game functions allowing it to both take control of said functions, but also allow Lua addons to inject various things into the client as if it was done normally by the player.\nFor example, daochook hooks onto the games chat input where you would normally enter a command such as /wave to wave at someone. daochook intercepts all commands that run through the games command interpreter/handler and forwards them to its custom Lua addon engine. Addons can then decide if the command should be blocked from executing, allowing an addon to react to it first. This setup allows addons to implement and react to custom commands that are otherwise not built into the game client.\nAlong with this, by hooking the command handler function, Lua addons can also inject commands as if the player typed them, used a macro, or any other means of input the client would normally recognize.\nThis approach is applied for several major game functions allowing daochook to greatly enhance the features of the client.\n"},{"uri":"https://daochook.github.io/tags/","title":"Tags","tags":[],"description":"","content":""}]