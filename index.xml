<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Index on daochook Documentation</title><link>https://daochook.github.io/</link><description>Recent content in Index on daochook Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://daochook.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Configuring daochook</title><link>https://daochook.github.io/usage/configurations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/usage/configurations/</guid><description>Once daochook is fully and properly installed, you are ready to begin configurations.
Boot Configuration File Format The boot configuration file holds all of the information needed to launch the game client with daochook injected. It also includes some additional configurations used with daochook internally, such as if you wish to enable/disable certain included patches. Please read the following information carefully to ensure your boot configuration file is written correctly.</description></item><item><title>Creating Addons</title><link>https://daochook.github.io/developers/creating_addons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/creating_addons/</guid><description>Failure to follow the directions given here will result in your addon most likely not loading or immediately crashing/erroring. Addons are expected to follow a strict layout / guideline in order to be able to load and function properly! Be sure to read carefully before asking for help.
Creating A New Addon Addons are located within the &amp;lt;Path To daochook&amp;gt;\addons\ directory. Inside of this folder, you will see individual folders for each addon, as well as a libs folder which contains a handful of helper libraries that addons can make use of while running.</description></item><item><title>System Requirements</title><link>https://daochook.github.io/installation/system_requirements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/installation/system_requirements/</guid><description>daochook Requirements daochook specifically requires the following in order to function:
Microsoft Visual C++ Redist. 2022 - https://aka.ms/vs/17/release/vc_redist.x86.exe Latest Client Requirements Before attempting to use daochook, you should make sure that your system meets the minimum requirements for the official Dark Age of Camelot game client.
Minimum Recommended Pentium 4 2.0 GHz or equivalent Pentium 4 3.0 GHz or equivalent 512 MB RAM 1 GB RAM 3.5 GB free hard drive space 3.</description></item><item><title>Addon Table Information</title><link>https://daochook.github.io/developers/addon_table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/addon_table/</guid><description>The addon table is predefined within daochook for each addon being loaded. This table contains some additional properties that can be used/accessed by an addon while it&amp;rsquo;s running.
You should NEVER attempt to recreate the addon table or set it to a new value!
This will cause your addon to crash and potentially crash the full client.
addon Table Information The following table is the properties available within the addon table.</description></item><item><title>Install via Git (Recommended)</title><link>https://daochook.github.io/installation/install_git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/installation/install_git/</guid><description>If you are unsure of using Git or do not wish to use it, then you can instead follow the instructions for downloading the latest release package manually as a .zip file. See Install via Zip instead.
Currently, the best, and recommended, way to install daochook is by using Git. You can either use Git via the command line or install your personal favorite Git client or shell integration. There is no &amp;lsquo;best&amp;rsquo; client or means of using Git, that is entirely personal choice on which you prefer to use.</description></item><item><title>Running daochook</title><link>https://daochook.github.io/usage/running/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/usage/running/</guid><description>Launching daochook daochook can be launched two different ways. Either by creating a new instance of the game client and injecting into it, or by injecting into an existing game client process. It is recommended that you use daochook by injecting into a new client instance (which the injector will launch for you) for best results.
When the injector starts, it will take the given file name and locate it within the boot configuration directory automatically.</description></item><item><title>Events</title><link>https://daochook.github.io/developers/events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/events/</guid><description>Events are one of the main ways addons can be used to interact with the game client. daochook hooks onto multiple game functions and then creates/raises an event internally when one of those functions is invoked. When this happens, the internal addon manager will raise the event in every loaded addon whom has registered one or more callback functions to the event being raised. Addons can register more than one callback to an event if needed.</description></item><item><title>In-Game Commands</title><link>https://daochook.github.io/usage/commands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/usage/commands/</guid><description>daochook includes several custom commands that are built-in, which you can access by typing into the game chat like a normal slash command.
Commands follow the below syntax for arguments:
Syntax Meaning arg The argument is required and should be entered exactly how it&amp;rsquo;s displayed. &amp;lt;arg&amp;gt; The argument is required, a value should be given. &amp;lt;arg...&amp;gt; The argument is required, one or more values should be given. (arg|arg) The argument is required, one of the displayed values should be given.</description></item><item><title>Install via Zip</title><link>https://daochook.github.io/installation/install_zip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/installation/install_zip/</guid><description>It is recommended that you install daochook via a Git client for easy updates. See Install via Git if you are comfortable doing so.
Picking An Installation Folder When picking a folder to install daochook to, it is important that you are NOT breaking the following guidelines.
daochook should NOT be installed into a system protected folder.
This means it should not be put into folders (or folders within) such as:</description></item><item><title>bits</title><link>https://daochook.github.io/developers/namespaces/bits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/namespaces/bits/</guid><description>This namespace is currently unused.</description></item><item><title>common</title><link>https://daochook.github.io/developers/libraries/common/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/libraries/common/</guid><description>The common library is a general purpose library used to pull in and require commonly used librarys in a central single file. This library can be used to pull in general purpose libraries within a single require to avoid the need to manually include individual additional libraries over and over in addons.
The common library will automatically include the following other libraries:
sugar switch try Using The Library 1require &amp;#39;common&amp;#39;; Functions This library file does not define any new functions itself.</description></item><item><title>Credits</title><link>https://daochook.github.io/credits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/credits/</guid><description>daochook is created with ❤️ by atom0s
You can support my work via the following:
Sponsor via GitHub Sponsor via Patreon Donate via PayPal The following page is dedicated to the various tools and third-party projects / libraries that daochook makes use of.
Development Discussions / Research Credits towbes Development Tools Credits VSCode Insiders: https://code.visualstudio.com/insiders/ (Main development environment.) CMake: https://cmake.org/ (Build tooling.) GitHub: https://github.com/ (Source code repository.) The following VSCode extensions are used with the development of daochook:</description></item><item><title>daoc</title><link>https://daochook.github.io/developers/libraries/daoc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/libraries/daoc/</guid><description>The daoc (Dark Age of Camelot) library is used to add game related functionality and information. The main library file will automatically determine your client version, then include the additional version-specific sub-library files found within the /addons/libs/daoc/ folder. These sub folders are separate into client versions to ensure that the functionality will work on as many clients as possible. It’s also easy to add support for other client versions by simply making a copy of an existing folder and updating the function information and pointers appropriately.</description></item><item><title>events</title><link>https://daochook.github.io/developers/namespaces/events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/namespaces/events/</guid><description>The events namespace contains functions that are used for working with daochook events.
Functions exposed by this namespace are accessed via the prefix: hook.events.
Functions register Registers a new callback function to the given event.
1boolean hook.events.register(event_name, event_alias, callback_func); Parameter Name Type Description event_name string The name of the event to register this callback to. event_alias string The alias for this callback. callback_func function The function to invoke when the event is raised.</description></item><item><title>extensions</title><link>https://daochook.github.io/developers/namespaces/extensions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/namespaces/extensions/</guid><description>The extensions namespace is not actually a namespace that is accessible directly. Instead, this namespace is used, internally, to extend the functionality of Lua&amp;rsquo;s base types. (ie. boolean, coroutine, function, number, string, table, etc.)
coroutine Extensions kill Kills the current coroutine.
1coroutine.kill(); Parameter Name Type Description None. Returns None. sleep Yields the current coroutine, sleeping for the given delay of time.
1coroutine.sleep(delay); Parameter Name Type Description delay number The time delay to sleep for.</description></item><item><title>fs (File System)</title><link>https://daochook.github.io/developers/namespaces/filesystem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/namespaces/filesystem/</guid><description>The fs namespace contains functions that are used for working with file system operations. Lua does contain some basic file I/O functionality, but this namespace includes a handful of additional functions that make up for where Lua is lacking.
These file system functions make use of the C++ std::filesystem header. The functions are named the same/similar.
For more information on those functions, please visit: https://en.cppreference.com/w/cpp/filesystem
Functions exposed by this namespace are accessed via the prefix: hook.</description></item><item><title>game</title><link>https://daochook.github.io/developers/namespaces/game/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/namespaces/game/</guid><description>The game namespace contains functions that daochook has either hooked onto, or needed to interact with from within the hook due to either the calling convention being unfriendly with FFI or similar. These are generally wrappers that are just forwarded to Lua, giving addons access to call them.
Functions exposed by this namespace are accessed via the prefix: game.
Functions get_version_mode Returns the internal mode enumeration value that was used to read the games client version information.</description></item><item><title>hook</title><link>https://daochook.github.io/developers/namespaces/hook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/namespaces/hook/</guid><description>The hook namespace contains functions that directly interact with daochook.
Functions exposed by this namespace are accessed via the prefix: hook.
Functions get_hook_path Returns the path to where daochook is installed.
1string hook.get_hook_path(); Parameter Name Type Description None. Returns (string) The path where daochook is installed. get_hook_base Returns the base address of daochook in the current process.
1number hook.get_hook_base(); Parameter Name Type Description None. Returns (number) The base address of daochook in the current process.</description></item><item><title>imgui</title><link>https://daochook.github.io/developers/libraries/imgui/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/libraries/imgui/</guid><description>The imgui library is used to allow addons to easily interact with the ImGui implementation within daochook. This library forwards the needed enumerations and flag definitions that are passed to the various ImGui function calls. This library also contains a few helper functions to do a few things with ImGui easier.
This library also forwards the implemented global table gui to imgui to make easier usage of things and to better align to the C++ style code.</description></item><item><title>imgui</title><link>https://daochook.github.io/developers/namespaces/imgui/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/namespaces/imgui/</guid><description>The imgui namespace contains functions that are used to interact with the ImGui library. daochook offers a [nearly] full implementation of ImGui, adjusted to work nicer with Lua.
Due to how many functions are within ImGui, this documentation may remain &amp;rsquo;lacking&amp;rsquo; for a bit of time. However, some bits of information will be explained to help understand the changes made to the functions in order to make use of them in your addons.</description></item><item><title>json</title><link>https://daochook.github.io/developers/libraries/json/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/libraries/json/</guid><description>The json library is simply a third-party library implementing the JSON file format. This library is created by rxi.
Because daochook does not make this library, the documentation here will instead link to its official page.
You can find more information about this library here: https://github.com/rxi/json.lua
Note: This library is not recommended to be used for general purpose addon configurations.
Instead, you should make use of daochook&amp;rsquo;s settings library if you need addon configurations.</description></item><item><title>memory</title><link>https://daochook.github.io/developers/namespaces/memory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/namespaces/memory/</guid><description>The memory namespace contains functions that allow addons to access the game client memory in multiple ways.
You can also make use of the ffi library to access memory with more features such as casting to actual C style structures.
Functions exposed by this namespace are accessed via the prefix: hook.memory.
Functions get_base Returns the base address of a loaded module.
1number hook.memory.get_base(name); Parameter Name Type Description name string [Optional] The name of the module.</description></item><item><title>mime</title><link>https://daochook.github.io/developers/libraries/mime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/libraries/mime/</guid><description>The mime library is part of the LuaSocket library. It implements MIME file information and support more specifically used with sockets.
Because daochook does not make this library, the documentation here will instead link to its official page.
You can find more information about the full LuaSocket library here: https://github.com/lunarmodules/luasocket</description></item><item><title>misc</title><link>https://daochook.github.io/developers/namespaces/misc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/namespaces/misc/</guid><description>The misc namespace contains functions that don&amp;rsquo;t fit into their own namespace (either due to what they are for, or not having enough functions of the same type) that help with various things.
Functions exposed by this namespace are accessed via the prefix: hook.misc.
Functions get_clipboard Returns the current string in the clipboard.
1string|nil hook.misc.get_clipboard(); Parameter Name Type Description None. Returns (string | nil) The clipboard string on success, nil otherwise.</description></item><item><title>regex</title><link>https://daochook.github.io/developers/namespaces/regex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/namespaces/regex/</guid><description>The regex namespace contains functions that allow for more advanced regular expression usage.
These file system functions make use of the C++ std::regex header. The functions are named the same/similar.
For more information on those functions, please visit: https://en.cppreference.com/w/cpp/regex
Functions exposed by this namespace are accessed via the prefix: hook.regex.
Functions match Returns any matches to the given pattern on the given string. (Uses std::regex_match)
1table|nil hook.regex.match(message, pattern, flags); Parameter Name Type Description message string The message to match the pattern within.</description></item><item><title>settings</title><link>https://daochook.github.io/developers/libraries/settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/libraries/settings/</guid><description>The settings library is used to allow addons to create per-character configuration files. The library manages and handles the switching of characters automatically, addons simply need to register to an event, per-settings block, to receive the updated settings table information when a character switch happens.
Settings are serialized into a readable Lua table format making it easy for users to modify the settings on disk if needed.
The library will default to a character alias of _default_ when no character is logged in.</description></item><item><title>socket</title><link>https://daochook.github.io/developers/libraries/socket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/libraries/socket/</guid><description>The socket library is part of the LuaSocket library. It implements the base functionality for usages of sockets.
Because daochook does not make this library, the documentation here will instead link to its official page.
You can find more information about the full LuaSocket library here: https://github.com/lunarmodules/luasocket
The additional socket types and other libs used with this library are found within the socket subfolder.</description></item><item><title>sugar</title><link>https://daochook.github.io/developers/libraries/sugar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/libraries/sugar/</guid><description>The sugar library is a set of sub-libraries that adds a ton of functional programming helper extensions to the various core objects of Lua.
Using The Library Addons should require the common library if they wish to use the sugar library. It is included automatically with it.
1require &amp;#39;common&amp;#39;; Below you can find some information regarding each sub-library of sugar.
Because of how many functions this collection of sub-libraries implements, full documentation will not be made for every function.</description></item><item><title>switch</title><link>https://daochook.github.io/developers/libraries/switch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/libraries/switch/</guid><description>The switch library is a simple library used to create a C/C++ like switch case statement in Lua.
Lua does not have a stock method of implementing switch statements, thus this library can make that a possibility.
The switch library is based on code by Ryan Hartlage. https://github.com/ryanplusplus/switch.lua
Using The Library Addons should require the common library if they wish to use the switch library. It is included automatically with it.</description></item><item><title>tasks</title><link>https://daochook.github.io/developers/namespaces/tasks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/namespaces/tasks/</guid><description>The tasks namespace contains functions used to run concurrent functions (coroutines). These functions operate similar to Lua&amp;rsquo;s built in coroutines but offer a bit more flexibility on how they work. daochook also extends the built-in coroutine table to include additional functions.
Functions exposed by this namespace are accessed via the prefix: hook.tasks.
Functions once Executes a task once.
1hook.tasks.once(func); Parameter Name Type Description func function The function to execute. Returns None.</description></item><item><title>time</title><link>https://daochook.github.io/developers/namespaces/time/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/namespaces/time/</guid><description>The time namespace contains functions that offer more precise timing related information. Lua only offers two time related methods by default which don&amp;rsquo;t offer much in regards to precision timing, or other useful time related info.
Functions exposed by this namespace are accessed via the prefix: hook.time.
Functions clock Returns the current high-resolution clock information. (Uses std::chrono::high_resolution_clock::now)
1table hook.time.clock(); Parameter Name Type Description None. Returns (table) Table containing the high-resolution clock information.</description></item><item><title>trycatch</title><link>https://daochook.github.io/developers/libraries/trycatch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/libraries/trycatch/</guid><description>The trycatch library is a simple library used to create an error handling approach similar to C/C++/C#/etc. try, catch and finally calls.
The trycatch library is based on code by djfdyuruiry. https://github.com/djfdyuruiry/lua-try-catch-finally
Using The Library Addons should require the common library if they wish to use the trycatch library. It is included automatically with it.
1require &amp;#39;common&amp;#39;; Functions try Implements a try, catch, finally style statement.
1try(func); Parameter Name Type Description func function The function to attempt to run protected from errors.</description></item><item><title>win32types</title><link>https://daochook.github.io/developers/libraries/win32types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/libraries/win32types/</guid><description>The win32types library is a basic helper library for use with LuaJIT&amp;rsquo;s FFI library.
This library simply defines a handful of common Win32 types that will be used with FFI definitions, structures, function calls, etc.</description></item></channel></rss>