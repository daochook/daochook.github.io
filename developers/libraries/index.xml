<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Libraries on daochook Documentation</title><link>https://daochook.github.io/developers/libraries/</link><description>Recent content in Libraries on daochook Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://daochook.github.io/developers/libraries/index.xml" rel="self" type="application/rss+xml"/><item><title>common</title><link>https://daochook.github.io/developers/libraries/common/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/libraries/common/</guid><description>The common library is a general purpose library used to pull in and require commonly used librarys in a central single file. This library can be used to pull in general purpose libraries within a single require to avoid the need to manually include individual additional libraries over and over in addons.
The common library will automatically include the following other libraries:
sugar switch try Using The Library 1require &amp;#39;common&amp;#39;; Functions This library file does not define any new functions itself.</description></item><item><title>daoc</title><link>https://daochook.github.io/developers/libraries/daoc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/libraries/daoc/</guid><description>The daoc (Dark Age of Camelot) library is used to add game related functionality and information. The main library file will automatically determine your client version, then include the additional version-specific sub-library files found within the /addons/libs/daoc/ folder. These sub folders are separate into client versions to ensure that the functionality will work on as many clients as possible. Itâ€™s also easy to add support for other client versions by simply making a copy of an existing folder and updating the function information and pointers appropriately.</description></item><item><title>imgui</title><link>https://daochook.github.io/developers/libraries/imgui/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/libraries/imgui/</guid><description>The imgui library is used to allow addons to easily interact with the ImGui implementation within daochook. This library forwards the needed enumerations and flag definitions that are passed to the various ImGui function calls. This library also contains a few helper functions to do a few things with ImGui easier.
This library also forwards the implemented global table gui to imgui to make easier usage of things and to better align to the C++ style code.</description></item><item><title>json</title><link>https://daochook.github.io/developers/libraries/json/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/libraries/json/</guid><description>The json library is simply a third-party library implementing the JSON file format. This library is created by rxi.
Because daochook does not make this library, the documentation here will instead link to its official page.
You can find more information about this library here: https://github.com/rxi/json.lua
Note: This library is not recommended to be used for general purpose addon configurations.
Instead, you should make use of daochook&amp;rsquo;s settings library if you need addon configurations.</description></item><item><title>mime</title><link>https://daochook.github.io/developers/libraries/mime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/libraries/mime/</guid><description>The mime library is part of the LuaSocket library. It implements MIME file information and support more specifically used with sockets.
Because daochook does not make this library, the documentation here will instead link to its official page.
You can find more information about the full LuaSocket library here: https://github.com/lunarmodules/luasocket</description></item><item><title>settings</title><link>https://daochook.github.io/developers/libraries/settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/libraries/settings/</guid><description>The settings library is used to allow addons to create per-character configuration files. The library manages and handles the switching of characters automatically, addons simply need to register to an event, per-settings block, to receive the updated settings table information when a character switch happens.
Settings are serialized into a readable Lua table format making it easy for users to modify the settings on disk if needed.
The library will default to a character alias of _default_ when no character is logged in.</description></item><item><title>socket</title><link>https://daochook.github.io/developers/libraries/socket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/libraries/socket/</guid><description>The socket library is part of the LuaSocket library. It implements the base functionality for usages of sockets.
Because daochook does not make this library, the documentation here will instead link to its official page.
You can find more information about the full LuaSocket library here: https://github.com/lunarmodules/luasocket
The additional socket types and other libs used with this library are found within the socket subfolder.</description></item><item><title>sugar</title><link>https://daochook.github.io/developers/libraries/sugar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/libraries/sugar/</guid><description>The sugar library is a set of sub-libraries that adds a ton of functional programming helper extensions to the various core objects of Lua.
Using The Library Addons should require the common library if they wish to use the sugar library. It is included automatically with it.
1require &amp;#39;common&amp;#39;; Below you can find some information regarding each sub-library of sugar.
Because of how many functions this collection of sub-libraries implements, full documentation will not be made for every function.</description></item><item><title>switch</title><link>https://daochook.github.io/developers/libraries/switch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/libraries/switch/</guid><description>The switch library is a simple library used to create a C/C++ like switch case statement in Lua.
Lua does not have a stock method of implementing switch statements, thus this library can make that a possibility.
The switch library is based on code by Ryan Hartlage. https://github.com/ryanplusplus/switch.lua
Using The Library Addons should require the common library if they wish to use the switch library. It is included automatically with it.</description></item><item><title>trycatch</title><link>https://daochook.github.io/developers/libraries/trycatch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/libraries/trycatch/</guid><description>The trycatch library is a simple library used to create an error handling approach similar to C/C++/C#/etc. try, catch and finally calls.
The trycatch library is based on code by djfdyuruiry. https://github.com/djfdyuruiry/lua-try-catch-finally
Using The Library Addons should require the common library if they wish to use the trycatch library. It is included automatically with it.
1require &amp;#39;common&amp;#39;; Functions try Implements a try, catch, finally style statement.
1try(func); Parameter Name Type Description func function The function to attempt to run protected from errors.</description></item><item><title>win32types</title><link>https://daochook.github.io/developers/libraries/win32types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://daochook.github.io/developers/libraries/win32types/</guid><description>The win32types library is a basic helper library for use with LuaJIT&amp;rsquo;s FFI library.
This library simply defines a handful of common Win32 types that will be used with FFI definitions, structures, function calls, etc.</description></item></channel></rss>